// Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  board: (where?: BoardWhereInput) => Promise<boolean>;
  card: (where?: CardWhereInput) => Promise<boolean>;
  clipboard: (where?: ClipboardWhereInput) => Promise<boolean>;
  file: (where?: FileWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  board: (where: BoardWhereUniqueInput) => BoardNullablePromise;
  boards: (args?: {
    where?: BoardWhereInput;
    orderBy?: BoardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Board>;
  boardsConnection: (args?: {
    where?: BoardWhereInput;
    orderBy?: BoardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => BoardConnectionPromise;
  card: (where: CardWhereUniqueInput) => CardNullablePromise;
  cards: (args?: {
    where?: CardWhereInput;
    orderBy?: CardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Card>;
  cardsConnection: (args?: {
    where?: CardWhereInput;
    orderBy?: CardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CardConnectionPromise;
  clipboard: (where: ClipboardWhereUniqueInput) => ClipboardNullablePromise;
  clipboards: (args?: {
    where?: ClipboardWhereInput;
    orderBy?: ClipboardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Clipboard>;
  clipboardsConnection: (args?: {
    where?: ClipboardWhereInput;
    orderBy?: ClipboardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ClipboardConnectionPromise;
  file: (where: FileWhereUniqueInput) => FileNullablePromise;
  files: (args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<File>;
  filesConnection: (args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FileConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createBoard: (data: BoardCreateInput) => BoardPromise;
  updateBoard: (args: {
    data: BoardUpdateInput;
    where: BoardWhereUniqueInput;
  }) => BoardPromise;
  updateManyBoards: (args: {
    data: BoardUpdateManyMutationInput;
    where?: BoardWhereInput;
  }) => BatchPayloadPromise;
  upsertBoard: (args: {
    where: BoardWhereUniqueInput;
    create: BoardCreateInput;
    update: BoardUpdateInput;
  }) => BoardPromise;
  deleteBoard: (where: BoardWhereUniqueInput) => BoardPromise;
  deleteManyBoards: (where?: BoardWhereInput) => BatchPayloadPromise;
  createCard: (data: CardCreateInput) => CardPromise;
  updateCard: (args: {
    data: CardUpdateInput;
    where: CardWhereUniqueInput;
  }) => CardPromise;
  updateManyCards: (args: {
    data: CardUpdateManyMutationInput;
    where?: CardWhereInput;
  }) => BatchPayloadPromise;
  upsertCard: (args: {
    where: CardWhereUniqueInput;
    create: CardCreateInput;
    update: CardUpdateInput;
  }) => CardPromise;
  deleteCard: (where: CardWhereUniqueInput) => CardPromise;
  deleteManyCards: (where?: CardWhereInput) => BatchPayloadPromise;
  createClipboard: (data: ClipboardCreateInput) => ClipboardPromise;
  updateClipboard: (args: {
    data: ClipboardUpdateInput;
    where: ClipboardWhereUniqueInput;
  }) => ClipboardPromise;
  updateManyClipboards: (args: {
    data: ClipboardUpdateManyMutationInput;
    where?: ClipboardWhereInput;
  }) => BatchPayloadPromise;
  upsertClipboard: (args: {
    where: ClipboardWhereUniqueInput;
    create: ClipboardCreateInput;
    update: ClipboardUpdateInput;
  }) => ClipboardPromise;
  deleteClipboard: (where: ClipboardWhereUniqueInput) => ClipboardPromise;
  deleteManyClipboards: (where?: ClipboardWhereInput) => BatchPayloadPromise;
  createFile: (data: FileCreateInput) => FilePromise;
  updateFile: (args: {
    data: FileUpdateInput;
    where: FileWhereUniqueInput;
  }) => FilePromise;
  updateManyFiles: (args: {
    data: FileUpdateManyMutationInput;
    where?: FileWhereInput;
  }) => BatchPayloadPromise;
  upsertFile: (args: {
    where: FileWhereUniqueInput;
    create: FileCreateInput;
    update: FileUpdateInput;
  }) => FilePromise;
  deleteFile: (where: FileWhereUniqueInput) => FilePromise;
  deleteManyFiles: (where?: FileWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  board: (
    where?: BoardSubscriptionWhereInput
  ) => BoardSubscriptionPayloadSubscription;
  card: (
    where?: CardSubscriptionWhereInput
  ) => CardSubscriptionPayloadSubscription;
  clipboard: (
    where?: ClipboardSubscriptionWhereInput
  ) => ClipboardSubscriptionPayloadSubscription;
  file: (
    where?: FileSubscriptionWhereInput
  ) => FileSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type FileType = "IMAGE" | "DOCUMENT" | "OTHER";

export type BoardOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "slug_ASC"
  | "slug_DESC"
  | "isPublic_ASC"
  | "isPublic_DESC";

export type CardOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "slug_ASC"
  | "slug_DESC"
  | "content_ASC"
  | "content_DESC"
  | "isPublic_ASC"
  | "isPublic_DESC"
  | "archived_ASC"
  | "archived_DESC";

export type FileOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "filename_ASC"
  | "filename_DESC";

export type UserRole = "NORMAL" | "ADMIN";

export type ClipboardOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "content_ASC"
  | "content_DESC"
  | "archived_ASC"
  | "archived_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "role_ASC"
  | "role_DESC"
  | "profileImage_ASC"
  | "profileImage_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface UserUpdateWithWhereUniqueWithoutJoinedBoardsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutJoinedBoardsDataInput;
}

export type BoardWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface BoardUpdateOneWithoutCardsInput {
  create?: Maybe<BoardCreateWithoutCardsInput>;
  update?: Maybe<BoardUpdateWithoutCardsDataInput>;
  upsert?: Maybe<BoardUpsertWithoutCardsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<BoardWhereUniqueInput>;
}

export interface FileWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  card?: Maybe<CardWhereInput>;
  type?: Maybe<FileType>;
  type_not?: Maybe<FileType>;
  type_in?: Maybe<FileType[] | FileType>;
  type_not_in?: Maybe<FileType[] | FileType>;
  filename?: Maybe<String>;
  filename_not?: Maybe<String>;
  filename_in?: Maybe<String[] | String>;
  filename_not_in?: Maybe<String[] | String>;
  filename_lt?: Maybe<String>;
  filename_lte?: Maybe<String>;
  filename_gt?: Maybe<String>;
  filename_gte?: Maybe<String>;
  filename_contains?: Maybe<String>;
  filename_not_contains?: Maybe<String>;
  filename_starts_with?: Maybe<String>;
  filename_not_starts_with?: Maybe<String>;
  filename_ends_with?: Maybe<String>;
  filename_not_ends_with?: Maybe<String>;
  AND?: Maybe<FileWhereInput[] | FileWhereInput>;
  OR?: Maybe<FileWhereInput[] | FileWhereInput>;
  NOT?: Maybe<FileWhereInput[] | FileWhereInput>;
}

export interface BoardUpdateWithoutCardsDataInput {
  title?: Maybe<String>;
  slug?: Maybe<String>;
  creator?: Maybe<UserUpdateOneRequiredWithoutCreatedBoardsInput>;
  member?: Maybe<UserUpdateManyWithoutJoinedBoardsInput>;
  isPublic?: Maybe<Boolean>;
}

export interface ClipboardWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  creator?: Maybe<UserWhereInput>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  archived?: Maybe<Boolean>;
  archived_not?: Maybe<Boolean>;
  AND?: Maybe<ClipboardWhereInput[] | ClipboardWhereInput>;
  OR?: Maybe<ClipboardWhereInput[] | ClipboardWhereInput>;
  NOT?: Maybe<ClipboardWhereInput[] | ClipboardWhereInput>;
}

export interface BoardUpdateWithWhereUniqueWithoutMemberInput {
  where: BoardWhereUniqueInput;
  data: BoardUpdateWithoutMemberDataInput;
}

export interface CardUpdateInput {
  creator?: Maybe<UserUpdateOneRequiredWithoutCreatedCardsInput>;
  parent?: Maybe<BoardUpdateOneWithoutCardsInput>;
  title?: Maybe<String>;
  slug?: Maybe<String>;
  content?: Maybe<String>;
  isPublic?: Maybe<Boolean>;
  archived?: Maybe<Boolean>;
  files?: Maybe<FileUpdateManyWithoutCardInput>;
}

export interface BoardUpdateWithoutMemberDataInput {
  title?: Maybe<String>;
  slug?: Maybe<String>;
  creator?: Maybe<UserUpdateOneRequiredWithoutCreatedBoardsInput>;
  isPublic?: Maybe<Boolean>;
  cards?: Maybe<CardUpdateManyWithoutParentInput>;
}

export interface BoardUpsertWithoutCardsInput {
  update: BoardUpdateWithoutCardsDataInput;
  create: BoardCreateWithoutCardsInput;
}

export interface CardUpdateManyWithoutParentInput {
  create?: Maybe<CardCreateWithoutParentInput[] | CardCreateWithoutParentInput>;
  delete?: Maybe<CardWhereUniqueInput[] | CardWhereUniqueInput>;
  connect?: Maybe<CardWhereUniqueInput[] | CardWhereUniqueInput>;
  set?: Maybe<CardWhereUniqueInput[] | CardWhereUniqueInput>;
  disconnect?: Maybe<CardWhereUniqueInput[] | CardWhereUniqueInput>;
  update?: Maybe<
    | CardUpdateWithWhereUniqueWithoutParentInput[]
    | CardUpdateWithWhereUniqueWithoutParentInput
  >;
  upsert?: Maybe<
    | CardUpsertWithWhereUniqueWithoutParentInput[]
    | CardUpsertWithWhereUniqueWithoutParentInput
  >;
  deleteMany?: Maybe<CardScalarWhereInput[] | CardScalarWhereInput>;
  updateMany?: Maybe<
    CardUpdateManyWithWhereNestedInput[] | CardUpdateManyWithWhereNestedInput
  >;
}

export interface BoardWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  slug?: Maybe<String>;
  slug_not?: Maybe<String>;
  slug_in?: Maybe<String[] | String>;
  slug_not_in?: Maybe<String[] | String>;
  slug_lt?: Maybe<String>;
  slug_lte?: Maybe<String>;
  slug_gt?: Maybe<String>;
  slug_gte?: Maybe<String>;
  slug_contains?: Maybe<String>;
  slug_not_contains?: Maybe<String>;
  slug_starts_with?: Maybe<String>;
  slug_not_starts_with?: Maybe<String>;
  slug_ends_with?: Maybe<String>;
  slug_not_ends_with?: Maybe<String>;
  creator?: Maybe<UserWhereInput>;
  member_every?: Maybe<UserWhereInput>;
  member_some?: Maybe<UserWhereInput>;
  member_none?: Maybe<UserWhereInput>;
  isPublic?: Maybe<Boolean>;
  isPublic_not?: Maybe<Boolean>;
  cards_every?: Maybe<CardWhereInput>;
  cards_some?: Maybe<CardWhereInput>;
  cards_none?: Maybe<CardWhereInput>;
  AND?: Maybe<BoardWhereInput[] | BoardWhereInput>;
  OR?: Maybe<BoardWhereInput[] | BoardWhereInput>;
  NOT?: Maybe<BoardWhereInput[] | BoardWhereInput>;
}

export interface CardUpdateWithWhereUniqueWithoutParentInput {
  where: CardWhereUniqueInput;
  data: CardUpdateWithoutParentDataInput;
}

export interface ClipboardSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ClipboardWhereInput>;
  AND?: Maybe<
    ClipboardSubscriptionWhereInput[] | ClipboardSubscriptionWhereInput
  >;
  OR?: Maybe<
    ClipboardSubscriptionWhereInput[] | ClipboardSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ClipboardSubscriptionWhereInput[] | ClipboardSubscriptionWhereInput
  >;
}

export interface CardUpdateWithoutParentDataInput {
  creator?: Maybe<UserUpdateOneRequiredWithoutCreatedCardsInput>;
  title?: Maybe<String>;
  slug?: Maybe<String>;
  content?: Maybe<String>;
  isPublic?: Maybe<Boolean>;
  archived?: Maybe<Boolean>;
  files?: Maybe<FileUpdateManyWithoutCardInput>;
}

export interface BoardSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<BoardWhereInput>;
  AND?: Maybe<BoardSubscriptionWhereInput[] | BoardSubscriptionWhereInput>;
  OR?: Maybe<BoardSubscriptionWhereInput[] | BoardSubscriptionWhereInput>;
  NOT?: Maybe<BoardSubscriptionWhereInput[] | BoardSubscriptionWhereInput>;
}

export interface UserUpdateOneRequiredWithoutCreatedCardsInput {
  create?: Maybe<UserCreateWithoutCreatedCardsInput>;
  update?: Maybe<UserUpdateWithoutCreatedCardsDataInput>;
  upsert?: Maybe<UserUpsertWithoutCreatedCardsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<UserRole>;
  profileImage?: Maybe<String>;
  createdBoards?: Maybe<BoardUpdateManyWithoutCreatorInput>;
  joinedBoards?: Maybe<BoardUpdateManyWithoutMemberInput>;
  createdCards?: Maybe<CardUpdateManyWithoutCreatorInput>;
  createdClipboards?: Maybe<ClipboardUpdateManyWithoutCreatorInput>;
}

export interface UserUpdateWithoutCreatedCardsDataInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<UserRole>;
  profileImage?: Maybe<String>;
  createdBoards?: Maybe<BoardUpdateManyWithoutCreatorInput>;
  joinedBoards?: Maybe<BoardUpdateManyWithoutMemberInput>;
  createdClipboards?: Maybe<ClipboardUpdateManyWithoutCreatorInput>;
}

export interface FileUpdateManyMutationInput {
  type?: Maybe<FileType>;
  filename?: Maybe<String>;
}

export interface BoardUpdateManyWithoutCreatorInput {
  create?: Maybe<
    BoardCreateWithoutCreatorInput[] | BoardCreateWithoutCreatorInput
  >;
  delete?: Maybe<BoardWhereUniqueInput[] | BoardWhereUniqueInput>;
  connect?: Maybe<BoardWhereUniqueInput[] | BoardWhereUniqueInput>;
  set?: Maybe<BoardWhereUniqueInput[] | BoardWhereUniqueInput>;
  disconnect?: Maybe<BoardWhereUniqueInput[] | BoardWhereUniqueInput>;
  update?: Maybe<
    | BoardUpdateWithWhereUniqueWithoutCreatorInput[]
    | BoardUpdateWithWhereUniqueWithoutCreatorInput
  >;
  upsert?: Maybe<
    | BoardUpsertWithWhereUniqueWithoutCreatorInput[]
    | BoardUpsertWithWhereUniqueWithoutCreatorInput
  >;
  deleteMany?: Maybe<BoardScalarWhereInput[] | BoardScalarWhereInput>;
  updateMany?: Maybe<
    BoardUpdateManyWithWhereNestedInput[] | BoardUpdateManyWithWhereNestedInput
  >;
}

export interface CardUpsertWithoutFilesInput {
  update: CardUpdateWithoutFilesDataInput;
  create: CardCreateWithoutFilesInput;
}

export interface BoardUpdateWithWhereUniqueWithoutCreatorInput {
  where: BoardWhereUniqueInput;
  data: BoardUpdateWithoutCreatorDataInput;
}

export interface CardUpdateOneRequiredWithoutFilesInput {
  create?: Maybe<CardCreateWithoutFilesInput>;
  update?: Maybe<CardUpdateWithoutFilesDataInput>;
  upsert?: Maybe<CardUpsertWithoutFilesInput>;
  connect?: Maybe<CardWhereUniqueInput>;
}

export interface BoardUpdateWithoutCreatorDataInput {
  title?: Maybe<String>;
  slug?: Maybe<String>;
  member?: Maybe<UserUpdateManyWithoutJoinedBoardsInput>;
  isPublic?: Maybe<Boolean>;
  cards?: Maybe<CardUpdateManyWithoutParentInput>;
}

export interface FileUpdateInput {
  card?: Maybe<CardUpdateOneRequiredWithoutFilesInput>;
  type?: Maybe<FileType>;
  filename?: Maybe<String>;
}

export interface UserUpdateManyWithoutJoinedBoardsInput {
  create?: Maybe<
    UserCreateWithoutJoinedBoardsInput[] | UserCreateWithoutJoinedBoardsInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutJoinedBoardsInput[]
    | UserUpdateWithWhereUniqueWithoutJoinedBoardsInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutJoinedBoardsInput[]
    | UserUpsertWithWhereUniqueWithoutJoinedBoardsInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface CardCreateOneWithoutFilesInput {
  create?: Maybe<CardCreateWithoutFilesInput>;
  connect?: Maybe<CardWhereUniqueInput>;
}

export interface UserCreateWithoutCreatedClipboardsInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  role: UserRole;
  profileImage?: Maybe<String>;
  createdBoards?: Maybe<BoardCreateManyWithoutCreatorInput>;
  joinedBoards?: Maybe<BoardCreateManyWithoutMemberInput>;
  createdCards?: Maybe<CardCreateManyWithoutCreatorInput>;
}

export interface FileCreateInput {
  id?: Maybe<ID_Input>;
  card: CardCreateOneWithoutFilesInput;
  type?: Maybe<FileType>;
  filename: String;
}

export interface UserUpdateWithoutJoinedBoardsDataInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<UserRole>;
  profileImage?: Maybe<String>;
  createdBoards?: Maybe<BoardUpdateManyWithoutCreatorInput>;
  createdCards?: Maybe<CardUpdateManyWithoutCreatorInput>;
  createdClipboards?: Maybe<ClipboardUpdateManyWithoutCreatorInput>;
}

export interface UserUpsertWithoutCreatedClipboardsInput {
  update: UserUpdateWithoutCreatedClipboardsDataInput;
  create: UserCreateWithoutCreatedClipboardsInput;
}

export interface CardUpdateManyWithoutCreatorInput {
  create?: Maybe<
    CardCreateWithoutCreatorInput[] | CardCreateWithoutCreatorInput
  >;
  delete?: Maybe<CardWhereUniqueInput[] | CardWhereUniqueInput>;
  connect?: Maybe<CardWhereUniqueInput[] | CardWhereUniqueInput>;
  set?: Maybe<CardWhereUniqueInput[] | CardWhereUniqueInput>;
  disconnect?: Maybe<CardWhereUniqueInput[] | CardWhereUniqueInput>;
  update?: Maybe<
    | CardUpdateWithWhereUniqueWithoutCreatorInput[]
    | CardUpdateWithWhereUniqueWithoutCreatorInput
  >;
  upsert?: Maybe<
    | CardUpsertWithWhereUniqueWithoutCreatorInput[]
    | CardUpsertWithWhereUniqueWithoutCreatorInput
  >;
  deleteMany?: Maybe<CardScalarWhereInput[] | CardScalarWhereInput>;
  updateMany?: Maybe<
    CardUpdateManyWithWhereNestedInput[] | CardUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithoutCreatedClipboardsDataInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<UserRole>;
  profileImage?: Maybe<String>;
  createdBoards?: Maybe<BoardUpdateManyWithoutCreatorInput>;
  joinedBoards?: Maybe<BoardUpdateManyWithoutMemberInput>;
  createdCards?: Maybe<CardUpdateManyWithoutCreatorInput>;
}

export interface CardUpdateWithWhereUniqueWithoutCreatorInput {
  where: CardWhereUniqueInput;
  data: CardUpdateWithoutCreatorDataInput;
}

export interface ClipboardUpdateInput {
  creator?: Maybe<UserUpdateOneRequiredWithoutCreatedClipboardsInput>;
  content?: Maybe<String>;
  archived?: Maybe<Boolean>;
}

export interface CardUpdateWithoutCreatorDataInput {
  parent?: Maybe<BoardUpdateOneWithoutCardsInput>;
  title?: Maybe<String>;
  slug?: Maybe<String>;
  content?: Maybe<String>;
  isPublic?: Maybe<Boolean>;
  archived?: Maybe<Boolean>;
  files?: Maybe<FileUpdateManyWithoutCardInput>;
}

export interface BoardCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  slug: String;
  creator: UserCreateOneWithoutCreatedBoardsInput;
  member?: Maybe<UserCreateManyWithoutJoinedBoardsInput>;
  isPublic?: Maybe<Boolean>;
  cards?: Maybe<CardCreateManyWithoutParentInput>;
}

export interface UserCreateOneWithoutCreatedClipboardsInput {
  create?: Maybe<UserCreateWithoutCreatedClipboardsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutCreatedBoardsInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  role: UserRole;
  profileImage?: Maybe<String>;
  joinedBoards?: Maybe<BoardCreateManyWithoutMemberInput>;
  createdCards?: Maybe<CardCreateManyWithoutCreatorInput>;
  createdClipboards?: Maybe<ClipboardCreateManyWithoutCreatorInput>;
}

export interface CardWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  creator?: Maybe<UserWhereInput>;
  parent?: Maybe<BoardWhereInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  slug?: Maybe<String>;
  slug_not?: Maybe<String>;
  slug_in?: Maybe<String[] | String>;
  slug_not_in?: Maybe<String[] | String>;
  slug_lt?: Maybe<String>;
  slug_lte?: Maybe<String>;
  slug_gt?: Maybe<String>;
  slug_gte?: Maybe<String>;
  slug_contains?: Maybe<String>;
  slug_not_contains?: Maybe<String>;
  slug_starts_with?: Maybe<String>;
  slug_not_starts_with?: Maybe<String>;
  slug_ends_with?: Maybe<String>;
  slug_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  isPublic?: Maybe<Boolean>;
  isPublic_not?: Maybe<Boolean>;
  archived?: Maybe<Boolean>;
  archived_not?: Maybe<Boolean>;
  files_every?: Maybe<FileWhereInput>;
  files_some?: Maybe<FileWhereInput>;
  files_none?: Maybe<FileWhereInput>;
  AND?: Maybe<CardWhereInput[] | CardWhereInput>;
  OR?: Maybe<CardWhereInput[] | CardWhereInput>;
  NOT?: Maybe<CardWhereInput[] | CardWhereInput>;
}

export interface BoardCreateWithoutMemberInput {
  id?: Maybe<ID_Input>;
  title: String;
  slug: String;
  creator: UserCreateOneWithoutCreatedBoardsInput;
  isPublic?: Maybe<Boolean>;
  cards?: Maybe<CardCreateManyWithoutParentInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  role?: Maybe<UserRole>;
  role_not?: Maybe<UserRole>;
  role_in?: Maybe<UserRole[] | UserRole>;
  role_not_in?: Maybe<UserRole[] | UserRole>;
  profileImage?: Maybe<String>;
  profileImage_not?: Maybe<String>;
  profileImage_in?: Maybe<String[] | String>;
  profileImage_not_in?: Maybe<String[] | String>;
  profileImage_lt?: Maybe<String>;
  profileImage_lte?: Maybe<String>;
  profileImage_gt?: Maybe<String>;
  profileImage_gte?: Maybe<String>;
  profileImage_contains?: Maybe<String>;
  profileImage_not_contains?: Maybe<String>;
  profileImage_starts_with?: Maybe<String>;
  profileImage_not_starts_with?: Maybe<String>;
  profileImage_ends_with?: Maybe<String>;
  profileImage_not_ends_with?: Maybe<String>;
  createdBoards_every?: Maybe<BoardWhereInput>;
  createdBoards_some?: Maybe<BoardWhereInput>;
  createdBoards_none?: Maybe<BoardWhereInput>;
  joinedBoards_every?: Maybe<BoardWhereInput>;
  joinedBoards_some?: Maybe<BoardWhereInput>;
  joinedBoards_none?: Maybe<BoardWhereInput>;
  createdCards_every?: Maybe<CardWhereInput>;
  createdCards_some?: Maybe<CardWhereInput>;
  createdCards_none?: Maybe<CardWhereInput>;
  createdClipboards_every?: Maybe<ClipboardWhereInput>;
  createdClipboards_some?: Maybe<ClipboardWhereInput>;
  createdClipboards_none?: Maybe<ClipboardWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface CardCreateWithoutParentInput {
  id?: Maybe<ID_Input>;
  creator: UserCreateOneWithoutCreatedCardsInput;
  title: String;
  slug: String;
  content?: Maybe<String>;
  isPublic?: Maybe<Boolean>;
  archived?: Maybe<Boolean>;
  files?: Maybe<FileCreateManyWithoutCardInput>;
}

export interface FileUpdateManyWithoutCardInput {
  create?: Maybe<FileCreateWithoutCardInput[] | FileCreateWithoutCardInput>;
  delete?: Maybe<FileWhereUniqueInput[] | FileWhereUniqueInput>;
  connect?: Maybe<FileWhereUniqueInput[] | FileWhereUniqueInput>;
  set?: Maybe<FileWhereUniqueInput[] | FileWhereUniqueInput>;
  disconnect?: Maybe<FileWhereUniqueInput[] | FileWhereUniqueInput>;
  update?: Maybe<
    | FileUpdateWithWhereUniqueWithoutCardInput[]
    | FileUpdateWithWhereUniqueWithoutCardInput
  >;
  upsert?: Maybe<
    | FileUpsertWithWhereUniqueWithoutCardInput[]
    | FileUpsertWithWhereUniqueWithoutCardInput
  >;
  deleteMany?: Maybe<FileScalarWhereInput[] | FileScalarWhereInput>;
  updateMany?: Maybe<
    FileUpdateManyWithWhereNestedInput[] | FileUpdateManyWithWhereNestedInput
  >;
}

export interface UserCreateWithoutCreatedCardsInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  role: UserRole;
  profileImage?: Maybe<String>;
  createdBoards?: Maybe<BoardCreateManyWithoutCreatorInput>;
  joinedBoards?: Maybe<BoardCreateManyWithoutMemberInput>;
  createdClipboards?: Maybe<ClipboardCreateManyWithoutCreatorInput>;
}

export interface FileUpdateWithWhereUniqueWithoutCardInput {
  where: FileWhereUniqueInput;
  data: FileUpdateWithoutCardDataInput;
}

export interface BoardCreateWithoutCreatorInput {
  id?: Maybe<ID_Input>;
  title: String;
  slug: String;
  member?: Maybe<UserCreateManyWithoutJoinedBoardsInput>;
  isPublic?: Maybe<Boolean>;
  cards?: Maybe<CardCreateManyWithoutParentInput>;
}

export interface FileUpdateWithoutCardDataInput {
  type?: Maybe<FileType>;
  filename?: Maybe<String>;
}

export interface UserCreateWithoutJoinedBoardsInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  role: UserRole;
  profileImage?: Maybe<String>;
  createdBoards?: Maybe<BoardCreateManyWithoutCreatorInput>;
  createdCards?: Maybe<CardCreateManyWithoutCreatorInput>;
  createdClipboards?: Maybe<ClipboardCreateManyWithoutCreatorInput>;
}

export interface FileUpsertWithWhereUniqueWithoutCardInput {
  where: FileWhereUniqueInput;
  update: FileUpdateWithoutCardDataInput;
  create: FileCreateWithoutCardInput;
}

export interface CardCreateWithoutCreatorInput {
  id?: Maybe<ID_Input>;
  parent?: Maybe<BoardCreateOneWithoutCardsInput>;
  title: String;
  slug: String;
  content?: Maybe<String>;
  isPublic?: Maybe<Boolean>;
  archived?: Maybe<Boolean>;
  files?: Maybe<FileCreateManyWithoutCardInput>;
}

export interface FileScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  type?: Maybe<FileType>;
  type_not?: Maybe<FileType>;
  type_in?: Maybe<FileType[] | FileType>;
  type_not_in?: Maybe<FileType[] | FileType>;
  filename?: Maybe<String>;
  filename_not?: Maybe<String>;
  filename_in?: Maybe<String[] | String>;
  filename_not_in?: Maybe<String[] | String>;
  filename_lt?: Maybe<String>;
  filename_lte?: Maybe<String>;
  filename_gt?: Maybe<String>;
  filename_gte?: Maybe<String>;
  filename_contains?: Maybe<String>;
  filename_not_contains?: Maybe<String>;
  filename_starts_with?: Maybe<String>;
  filename_not_starts_with?: Maybe<String>;
  filename_ends_with?: Maybe<String>;
  filename_not_ends_with?: Maybe<String>;
  AND?: Maybe<FileScalarWhereInput[] | FileScalarWhereInput>;
  OR?: Maybe<FileScalarWhereInput[] | FileScalarWhereInput>;
  NOT?: Maybe<FileScalarWhereInput[] | FileScalarWhereInput>;
}

export interface BoardCreateWithoutCardsInput {
  id?: Maybe<ID_Input>;
  title: String;
  slug: String;
  creator: UserCreateOneWithoutCreatedBoardsInput;
  member?: Maybe<UserCreateManyWithoutJoinedBoardsInput>;
  isPublic?: Maybe<Boolean>;
}

export interface FileUpdateManyWithWhereNestedInput {
  where: FileScalarWhereInput;
  data: FileUpdateManyDataInput;
}

export interface FileCreateWithoutCardInput {
  id?: Maybe<ID_Input>;
  type?: Maybe<FileType>;
  filename: String;
}

export interface FileUpdateManyDataInput {
  type?: Maybe<FileType>;
  filename?: Maybe<String>;
}

export interface ClipboardCreateWithoutCreatorInput {
  id?: Maybe<ID_Input>;
  content: String;
  archived?: Maybe<Boolean>;
}

export interface CardUpsertWithWhereUniqueWithoutCreatorInput {
  where: CardWhereUniqueInput;
  update: CardUpdateWithoutCreatorDataInput;
  create: CardCreateWithoutCreatorInput;
}

export interface UserUpdateOneRequiredWithoutCreatedBoardsInput {
  create?: Maybe<UserCreateWithoutCreatedBoardsInput>;
  update?: Maybe<UserUpdateWithoutCreatedBoardsDataInput>;
  upsert?: Maybe<UserUpsertWithoutCreatedBoardsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface CardScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  slug?: Maybe<String>;
  slug_not?: Maybe<String>;
  slug_in?: Maybe<String[] | String>;
  slug_not_in?: Maybe<String[] | String>;
  slug_lt?: Maybe<String>;
  slug_lte?: Maybe<String>;
  slug_gt?: Maybe<String>;
  slug_gte?: Maybe<String>;
  slug_contains?: Maybe<String>;
  slug_not_contains?: Maybe<String>;
  slug_starts_with?: Maybe<String>;
  slug_not_starts_with?: Maybe<String>;
  slug_ends_with?: Maybe<String>;
  slug_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  isPublic?: Maybe<Boolean>;
  isPublic_not?: Maybe<Boolean>;
  archived?: Maybe<Boolean>;
  archived_not?: Maybe<Boolean>;
  AND?: Maybe<CardScalarWhereInput[] | CardScalarWhereInput>;
  OR?: Maybe<CardScalarWhereInput[] | CardScalarWhereInput>;
  NOT?: Maybe<CardScalarWhereInput[] | CardScalarWhereInput>;
}

export interface BoardUpdateManyWithoutMemberInput {
  create?: Maybe<
    BoardCreateWithoutMemberInput[] | BoardCreateWithoutMemberInput
  >;
  delete?: Maybe<BoardWhereUniqueInput[] | BoardWhereUniqueInput>;
  connect?: Maybe<BoardWhereUniqueInput[] | BoardWhereUniqueInput>;
  set?: Maybe<BoardWhereUniqueInput[] | BoardWhereUniqueInput>;
  disconnect?: Maybe<BoardWhereUniqueInput[] | BoardWhereUniqueInput>;
  update?: Maybe<
    | BoardUpdateWithWhereUniqueWithoutMemberInput[]
    | BoardUpdateWithWhereUniqueWithoutMemberInput
  >;
  upsert?: Maybe<
    | BoardUpsertWithWhereUniqueWithoutMemberInput[]
    | BoardUpsertWithWhereUniqueWithoutMemberInput
  >;
  deleteMany?: Maybe<BoardScalarWhereInput[] | BoardScalarWhereInput>;
  updateMany?: Maybe<
    BoardUpdateManyWithWhereNestedInput[] | BoardUpdateManyWithWhereNestedInput
  >;
}

export interface CardUpdateManyWithWhereNestedInput {
  where: CardScalarWhereInput;
  data: CardUpdateManyDataInput;
}

export interface FileSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FileWhereInput>;
  AND?: Maybe<FileSubscriptionWhereInput[] | FileSubscriptionWhereInput>;
  OR?: Maybe<FileSubscriptionWhereInput[] | FileSubscriptionWhereInput>;
  NOT?: Maybe<FileSubscriptionWhereInput[] | FileSubscriptionWhereInput>;
}

export interface CardUpdateManyDataInput {
  title?: Maybe<String>;
  slug?: Maybe<String>;
  content?: Maybe<String>;
  isPublic?: Maybe<Boolean>;
  archived?: Maybe<Boolean>;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<UserRole>;
  profileImage?: Maybe<String>;
}

export interface ClipboardUpdateManyWithoutCreatorInput {
  create?: Maybe<
    ClipboardCreateWithoutCreatorInput[] | ClipboardCreateWithoutCreatorInput
  >;
  delete?: Maybe<ClipboardWhereUniqueInput[] | ClipboardWhereUniqueInput>;
  connect?: Maybe<ClipboardWhereUniqueInput[] | ClipboardWhereUniqueInput>;
  set?: Maybe<ClipboardWhereUniqueInput[] | ClipboardWhereUniqueInput>;
  disconnect?: Maybe<ClipboardWhereUniqueInput[] | ClipboardWhereUniqueInput>;
  update?: Maybe<
    | ClipboardUpdateWithWhereUniqueWithoutCreatorInput[]
    | ClipboardUpdateWithWhereUniqueWithoutCreatorInput
  >;
  upsert?: Maybe<
    | ClipboardUpsertWithWhereUniqueWithoutCreatorInput[]
    | ClipboardUpsertWithWhereUniqueWithoutCreatorInput
  >;
  deleteMany?: Maybe<ClipboardScalarWhereInput[] | ClipboardScalarWhereInput>;
  updateMany?: Maybe<
    | ClipboardUpdateManyWithWhereNestedInput[]
    | ClipboardUpdateManyWithWhereNestedInput
  >;
}

export type CardWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  slug?: Maybe<String>;
}>;

export interface ClipboardUpdateWithWhereUniqueWithoutCreatorInput {
  where: ClipboardWhereUniqueInput;
  data: ClipboardUpdateWithoutCreatorDataInput;
}

export type ClipboardWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ClipboardUpdateWithoutCreatorDataInput {
  content?: Maybe<String>;
  archived?: Maybe<Boolean>;
}

export type FileWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ClipboardUpsertWithWhereUniqueWithoutCreatorInput {
  where: ClipboardWhereUniqueInput;
  update: ClipboardUpdateWithoutCreatorDataInput;
  create: ClipboardCreateWithoutCreatorInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface ClipboardScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  archived?: Maybe<Boolean>;
  archived_not?: Maybe<Boolean>;
  AND?: Maybe<ClipboardScalarWhereInput[] | ClipboardScalarWhereInput>;
  OR?: Maybe<ClipboardScalarWhereInput[] | ClipboardScalarWhereInput>;
  NOT?: Maybe<ClipboardScalarWhereInput[] | ClipboardScalarWhereInput>;
}

export interface BoardCreateManyWithoutMemberInput {
  create?: Maybe<
    BoardCreateWithoutMemberInput[] | BoardCreateWithoutMemberInput
  >;
  connect?: Maybe<BoardWhereUniqueInput[] | BoardWhereUniqueInput>;
}

export interface ClipboardUpdateManyWithWhereNestedInput {
  where: ClipboardScalarWhereInput;
  data: ClipboardUpdateManyDataInput;
}

export interface UserCreateOneWithoutCreatedCardsInput {
  create?: Maybe<UserCreateWithoutCreatedCardsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ClipboardUpdateManyDataInput {
  content?: Maybe<String>;
  archived?: Maybe<Boolean>;
}

export interface UserCreateManyWithoutJoinedBoardsInput {
  create?: Maybe<
    UserCreateWithoutJoinedBoardsInput[] | UserCreateWithoutJoinedBoardsInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserUpsertWithWhereUniqueWithoutJoinedBoardsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutJoinedBoardsDataInput;
  create: UserCreateWithoutJoinedBoardsInput;
}

export interface BoardCreateOneWithoutCardsInput {
  create?: Maybe<BoardCreateWithoutCardsInput>;
  connect?: Maybe<BoardWhereUniqueInput>;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  role?: Maybe<UserRole>;
  role_not?: Maybe<UserRole>;
  role_in?: Maybe<UserRole[] | UserRole>;
  role_not_in?: Maybe<UserRole[] | UserRole>;
  profileImage?: Maybe<String>;
  profileImage_not?: Maybe<String>;
  profileImage_in?: Maybe<String[] | String>;
  profileImage_not_in?: Maybe<String[] | String>;
  profileImage_lt?: Maybe<String>;
  profileImage_lte?: Maybe<String>;
  profileImage_gt?: Maybe<String>;
  profileImage_gte?: Maybe<String>;
  profileImage_contains?: Maybe<String>;
  profileImage_not_contains?: Maybe<String>;
  profileImage_starts_with?: Maybe<String>;
  profileImage_not_starts_with?: Maybe<String>;
  profileImage_ends_with?: Maybe<String>;
  profileImage_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface ClipboardCreateManyWithoutCreatorInput {
  create?: Maybe<
    ClipboardCreateWithoutCreatorInput[] | ClipboardCreateWithoutCreatorInput
  >;
  connect?: Maybe<ClipboardWhereUniqueInput[] | ClipboardWhereUniqueInput>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateWithoutCreatedBoardsDataInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<UserRole>;
  profileImage?: Maybe<String>;
  joinedBoards?: Maybe<BoardUpdateManyWithoutMemberInput>;
  createdCards?: Maybe<CardUpdateManyWithoutCreatorInput>;
  createdClipboards?: Maybe<ClipboardUpdateManyWithoutCreatorInput>;
}

export interface UserUpdateManyDataInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<UserRole>;
  profileImage?: Maybe<String>;
}

export interface CardSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CardWhereInput>;
  AND?: Maybe<CardSubscriptionWhereInput[] | CardSubscriptionWhereInput>;
  OR?: Maybe<CardSubscriptionWhereInput[] | CardSubscriptionWhereInput>;
  NOT?: Maybe<CardSubscriptionWhereInput[] | CardSubscriptionWhereInput>;
}

export interface BoardUpsertWithWhereUniqueWithoutCreatorInput {
  where: BoardWhereUniqueInput;
  update: BoardUpdateWithoutCreatorDataInput;
  create: BoardCreateWithoutCreatorInput;
}

export interface CardUpdateWithoutFilesDataInput {
  creator?: Maybe<UserUpdateOneRequiredWithoutCreatedCardsInput>;
  parent?: Maybe<BoardUpdateOneWithoutCardsInput>;
  title?: Maybe<String>;
  slug?: Maybe<String>;
  content?: Maybe<String>;
  isPublic?: Maybe<Boolean>;
  archived?: Maybe<Boolean>;
}

export interface BoardScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  slug?: Maybe<String>;
  slug_not?: Maybe<String>;
  slug_in?: Maybe<String[] | String>;
  slug_not_in?: Maybe<String[] | String>;
  slug_lt?: Maybe<String>;
  slug_lte?: Maybe<String>;
  slug_gt?: Maybe<String>;
  slug_gte?: Maybe<String>;
  slug_contains?: Maybe<String>;
  slug_not_contains?: Maybe<String>;
  slug_starts_with?: Maybe<String>;
  slug_not_starts_with?: Maybe<String>;
  slug_ends_with?: Maybe<String>;
  slug_not_ends_with?: Maybe<String>;
  isPublic?: Maybe<Boolean>;
  isPublic_not?: Maybe<Boolean>;
  AND?: Maybe<BoardScalarWhereInput[] | BoardScalarWhereInput>;
  OR?: Maybe<BoardScalarWhereInput[] | BoardScalarWhereInput>;
  NOT?: Maybe<BoardScalarWhereInput[] | BoardScalarWhereInput>;
}

export interface ClipboardUpdateManyMutationInput {
  content?: Maybe<String>;
  archived?: Maybe<Boolean>;
}

export interface BoardUpdateManyWithWhereNestedInput {
  where: BoardScalarWhereInput;
  data: BoardUpdateManyDataInput;
}

export interface UserCreateOneWithoutCreatedBoardsInput {
  create?: Maybe<UserCreateWithoutCreatedBoardsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface BoardUpdateManyDataInput {
  title?: Maybe<String>;
  slug?: Maybe<String>;
  isPublic?: Maybe<Boolean>;
}

export interface BoardCreateManyWithoutCreatorInput {
  create?: Maybe<
    BoardCreateWithoutCreatorInput[] | BoardCreateWithoutCreatorInput
  >;
  connect?: Maybe<BoardWhereUniqueInput[] | BoardWhereUniqueInput>;
}

export interface UserUpsertWithoutCreatedCardsInput {
  update: UserUpdateWithoutCreatedCardsDataInput;
  create: UserCreateWithoutCreatedCardsInput;
}

export interface FileCreateManyWithoutCardInput {
  create?: Maybe<FileCreateWithoutCardInput[] | FileCreateWithoutCardInput>;
  connect?: Maybe<FileWhereUniqueInput[] | FileWhereUniqueInput>;
}

export interface CardUpsertWithWhereUniqueWithoutParentInput {
  where: CardWhereUniqueInput;
  update: CardUpdateWithoutParentDataInput;
  create: CardCreateWithoutParentInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface BoardUpsertWithWhereUniqueWithoutMemberInput {
  where: BoardWhereUniqueInput;
  update: BoardUpdateWithoutMemberDataInput;
  create: BoardCreateWithoutMemberInput;
}

export interface CardCreateWithoutFilesInput {
  id?: Maybe<ID_Input>;
  creator: UserCreateOneWithoutCreatedCardsInput;
  parent?: Maybe<BoardCreateOneWithoutCardsInput>;
  title: String;
  slug: String;
  content?: Maybe<String>;
  isPublic?: Maybe<Boolean>;
  archived?: Maybe<Boolean>;
}

export interface UserUpsertWithoutCreatedBoardsInput {
  update: UserUpdateWithoutCreatedBoardsDataInput;
  create: UserCreateWithoutCreatedBoardsInput;
}

export interface CardCreateManyWithoutParentInput {
  create?: Maybe<CardCreateWithoutParentInput[] | CardCreateWithoutParentInput>;
  connect?: Maybe<CardWhereUniqueInput[] | CardWhereUniqueInput>;
}

export interface CardCreateInput {
  id?: Maybe<ID_Input>;
  creator: UserCreateOneWithoutCreatedCardsInput;
  parent?: Maybe<BoardCreateOneWithoutCardsInput>;
  title: String;
  slug: String;
  content?: Maybe<String>;
  isPublic?: Maybe<Boolean>;
  archived?: Maybe<Boolean>;
  files?: Maybe<FileCreateManyWithoutCardInput>;
}

export interface CardUpdateManyMutationInput {
  title?: Maybe<String>;
  slug?: Maybe<String>;
  content?: Maybe<String>;
  isPublic?: Maybe<Boolean>;
  archived?: Maybe<Boolean>;
}

export interface ClipboardCreateInput {
  id?: Maybe<ID_Input>;
  creator: UserCreateOneWithoutCreatedClipboardsInput;
  content: String;
  archived?: Maybe<Boolean>;
}

export interface BoardUpdateManyMutationInput {
  title?: Maybe<String>;
  slug?: Maybe<String>;
  isPublic?: Maybe<Boolean>;
}

export interface CardCreateManyWithoutCreatorInput {
  create?: Maybe<
    CardCreateWithoutCreatorInput[] | CardCreateWithoutCreatorInput
  >;
  connect?: Maybe<CardWhereUniqueInput[] | CardWhereUniqueInput>;
}

export interface UserUpdateOneRequiredWithoutCreatedClipboardsInput {
  create?: Maybe<UserCreateWithoutCreatedClipboardsInput>;
  update?: Maybe<UserUpdateWithoutCreatedClipboardsDataInput>;
  upsert?: Maybe<UserUpsertWithoutCreatedClipboardsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  role: UserRole;
  profileImage?: Maybe<String>;
  createdBoards?: Maybe<BoardCreateManyWithoutCreatorInput>;
  joinedBoards?: Maybe<BoardCreateManyWithoutMemberInput>;
  createdCards?: Maybe<CardCreateManyWithoutCreatorInput>;
  createdClipboards?: Maybe<ClipboardCreateManyWithoutCreatorInput>;
}

export interface BoardUpdateInput {
  title?: Maybe<String>;
  slug?: Maybe<String>;
  creator?: Maybe<UserUpdateOneRequiredWithoutCreatedBoardsInput>;
  member?: Maybe<UserUpdateManyWithoutJoinedBoardsInput>;
  isPublic?: Maybe<Boolean>;
  cards?: Maybe<CardUpdateManyWithoutParentInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  password: String;
  role: UserRole;
  profileImage?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  role: () => Promise<UserRole>;
  profileImage: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<UserRole>>;
  profileImage: () => Promise<AsyncIterator<String>>;
}

export interface AggregateBoard {
  count: Int;
}

export interface AggregateBoardPromise
  extends Promise<AggregateBoard>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBoardSubscription
  extends Promise<AsyncIterator<AggregateBoard>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FileSubscriptionPayload {
  mutation: MutationType;
  node: File;
  updatedFields: String[];
  previousValues: FilePreviousValues;
}

export interface FileSubscriptionPayloadPromise
  extends Promise<FileSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FilePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FilePreviousValuesPromise>() => T;
}

export interface FileSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FileSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FileSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FilePreviousValuesSubscription>() => T;
}

export interface BoardEdge {
  node: Board;
  cursor: String;
}

export interface BoardEdgePromise extends Promise<BoardEdge>, Fragmentable {
  node: <T = BoardPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BoardEdgeSubscription
  extends Promise<AsyncIterator<BoardEdge>>,
    Fragmentable {
  node: <T = BoardSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface Card {
  id: ID_Output;
  title: String;
  slug: String;
  content?: String;
  isPublic: Boolean;
  archived: Boolean;
}

export interface CardPromise extends Promise<Card>, Fragmentable {
  id: () => Promise<ID_Output>;
  creator: <T = UserPromise>() => T;
  parent: <T = BoardPromise>() => T;
  title: () => Promise<String>;
  slug: () => Promise<String>;
  content: () => Promise<String>;
  isPublic: () => Promise<Boolean>;
  archived: () => Promise<Boolean>;
  files: <T = FragmentableArray<File>>(args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CardSubscription
  extends Promise<AsyncIterator<Card>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  creator: <T = UserSubscription>() => T;
  parent: <T = BoardSubscription>() => T;
  title: () => Promise<AsyncIterator<String>>;
  slug: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  isPublic: () => Promise<AsyncIterator<Boolean>>;
  archived: () => Promise<AsyncIterator<Boolean>>;
  files: <T = Promise<AsyncIterator<FileSubscription>>>(args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CardNullablePromise
  extends Promise<Card | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  creator: <T = UserPromise>() => T;
  parent: <T = BoardPromise>() => T;
  title: () => Promise<String>;
  slug: () => Promise<String>;
  content: () => Promise<String>;
  isPublic: () => Promise<Boolean>;
  archived: () => Promise<Boolean>;
  files: <T = FragmentableArray<File>>(args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface BoardConnection {
  pageInfo: PageInfo;
  edges: BoardEdge[];
}

export interface BoardConnectionPromise
  extends Promise<BoardConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BoardEdge>>() => T;
  aggregate: <T = AggregateBoardPromise>() => T;
}

export interface BoardConnectionSubscription
  extends Promise<AsyncIterator<BoardConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BoardEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBoardSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface FilePreviousValues {
  id: ID_Output;
  type?: FileType;
  filename: String;
}

export interface FilePreviousValuesPromise
  extends Promise<FilePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<FileType>;
  filename: () => Promise<String>;
}

export interface FilePreviousValuesSubscription
  extends Promise<AsyncIterator<FilePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<FileType>>;
  filename: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFile {
  count: Int;
}

export interface AggregateFilePromise
  extends Promise<AggregateFile>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFileSubscription
  extends Promise<AsyncIterator<AggregateFile>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Board {
  id: ID_Output;
  title: String;
  slug: String;
  isPublic: Boolean;
}

export interface BoardPromise extends Promise<Board>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  slug: () => Promise<String>;
  creator: <T = UserPromise>() => T;
  member: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  isPublic: () => Promise<Boolean>;
  cards: <T = FragmentableArray<Card>>(args?: {
    where?: CardWhereInput;
    orderBy?: CardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface BoardSubscription
  extends Promise<AsyncIterator<Board>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  slug: () => Promise<AsyncIterator<String>>;
  creator: <T = UserSubscription>() => T;
  member: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  isPublic: () => Promise<AsyncIterator<Boolean>>;
  cards: <T = Promise<AsyncIterator<CardSubscription>>>(args?: {
    where?: CardWhereInput;
    orderBy?: CardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface BoardNullablePromise
  extends Promise<Board | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  slug: () => Promise<String>;
  creator: <T = UserPromise>() => T;
  member: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  isPublic: () => Promise<Boolean>;
  cards: <T = FragmentableArray<Card>>(args?: {
    where?: CardWhereInput;
    orderBy?: CardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface FileConnection {
  pageInfo: PageInfo;
  edges: FileEdge[];
}

export interface FileConnectionPromise
  extends Promise<FileConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FileEdge>>() => T;
  aggregate: <T = AggregateFilePromise>() => T;
}

export interface FileConnectionSubscription
  extends Promise<AsyncIterator<FileConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FileEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFileSubscription>() => T;
}

export interface BoardSubscriptionPayload {
  mutation: MutationType;
  node: Board;
  updatedFields: String[];
  previousValues: BoardPreviousValues;
}

export interface BoardSubscriptionPayloadPromise
  extends Promise<BoardSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BoardPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BoardPreviousValuesPromise>() => T;
}

export interface BoardSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BoardSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BoardSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BoardPreviousValuesSubscription>() => T;
}

export interface ClipboardEdge {
  node: Clipboard;
  cursor: String;
}

export interface ClipboardEdgePromise
  extends Promise<ClipboardEdge>,
    Fragmentable {
  node: <T = ClipboardPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ClipboardEdgeSubscription
  extends Promise<AsyncIterator<ClipboardEdge>>,
    Fragmentable {
  node: <T = ClipboardSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BoardPreviousValues {
  id: ID_Output;
  title: String;
  slug: String;
  isPublic: Boolean;
}

export interface BoardPreviousValuesPromise
  extends Promise<BoardPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  slug: () => Promise<String>;
  isPublic: () => Promise<Boolean>;
}

export interface BoardPreviousValuesSubscription
  extends Promise<AsyncIterator<BoardPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  slug: () => Promise<AsyncIterator<String>>;
  isPublic: () => Promise<AsyncIterator<Boolean>>;
}

export interface AggregateCard {
  count: Int;
}

export interface AggregateCardPromise
  extends Promise<AggregateCard>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCardSubscription
  extends Promise<AsyncIterator<AggregateCard>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Clipboard {
  id: ID_Output;
  content: String;
  archived: Boolean;
}

export interface ClipboardPromise extends Promise<Clipboard>, Fragmentable {
  id: () => Promise<ID_Output>;
  creator: <T = UserPromise>() => T;
  content: () => Promise<String>;
  archived: () => Promise<Boolean>;
}

export interface ClipboardSubscription
  extends Promise<AsyncIterator<Clipboard>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  creator: <T = UserSubscription>() => T;
  content: () => Promise<AsyncIterator<String>>;
  archived: () => Promise<AsyncIterator<Boolean>>;
}

export interface ClipboardNullablePromise
  extends Promise<Clipboard | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  creator: <T = UserPromise>() => T;
  content: () => Promise<String>;
  archived: () => Promise<Boolean>;
}

export interface CardConnection {
  pageInfo: PageInfo;
  edges: CardEdge[];
}

export interface CardConnectionPromise
  extends Promise<CardConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CardEdge>>() => T;
  aggregate: <T = AggregateCardPromise>() => T;
}

export interface CardConnectionSubscription
  extends Promise<AsyncIterator<CardConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CardEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCardSubscription>() => T;
}

export interface CardSubscriptionPayload {
  mutation: MutationType;
  node: Card;
  updatedFields: String[];
  previousValues: CardPreviousValues;
}

export interface CardSubscriptionPayloadPromise
  extends Promise<CardSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CardPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CardPreviousValuesPromise>() => T;
}

export interface CardSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CardSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CardSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CardPreviousValuesSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CardPreviousValues {
  id: ID_Output;
  title: String;
  slug: String;
  content?: String;
  isPublic: Boolean;
  archived: Boolean;
}

export interface CardPreviousValuesPromise
  extends Promise<CardPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  slug: () => Promise<String>;
  content: () => Promise<String>;
  isPublic: () => Promise<Boolean>;
  archived: () => Promise<Boolean>;
}

export interface CardPreviousValuesSubscription
  extends Promise<AsyncIterator<CardPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  slug: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  isPublic: () => Promise<AsyncIterator<Boolean>>;
  archived: () => Promise<AsyncIterator<Boolean>>;
}

export interface FileEdge {
  node: File;
  cursor: String;
}

export interface FileEdgePromise extends Promise<FileEdge>, Fragmentable {
  node: <T = FilePromise>() => T;
  cursor: () => Promise<String>;
}

export interface FileEdgeSubscription
  extends Promise<AsyncIterator<FileEdge>>,
    Fragmentable {
  node: <T = FileSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ClipboardConnection {
  pageInfo: PageInfo;
  edges: ClipboardEdge[];
}

export interface ClipboardConnectionPromise
  extends Promise<ClipboardConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ClipboardEdge>>() => T;
  aggregate: <T = AggregateClipboardPromise>() => T;
}

export interface ClipboardConnectionSubscription
  extends Promise<AsyncIterator<ClipboardConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ClipboardEdgeSubscription>>>() => T;
  aggregate: <T = AggregateClipboardSubscription>() => T;
}

export interface File {
  id: ID_Output;
  type?: FileType;
  filename: String;
}

export interface FilePromise extends Promise<File>, Fragmentable {
  id: () => Promise<ID_Output>;
  card: <T = CardPromise>() => T;
  type: () => Promise<FileType>;
  filename: () => Promise<String>;
}

export interface FileSubscription
  extends Promise<AsyncIterator<File>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  card: <T = CardSubscription>() => T;
  type: () => Promise<AsyncIterator<FileType>>;
  filename: () => Promise<AsyncIterator<String>>;
}

export interface FileNullablePromise
  extends Promise<File | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  card: <T = CardPromise>() => T;
  type: () => Promise<FileType>;
  filename: () => Promise<String>;
}

export interface ClipboardPreviousValues {
  id: ID_Output;
  content: String;
  archived: Boolean;
}

export interface ClipboardPreviousValuesPromise
  extends Promise<ClipboardPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  content: () => Promise<String>;
  archived: () => Promise<Boolean>;
}

export interface ClipboardPreviousValuesSubscription
  extends Promise<AsyncIterator<ClipboardPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  content: () => Promise<AsyncIterator<String>>;
  archived: () => Promise<AsyncIterator<Boolean>>;
}

export interface ClipboardSubscriptionPayload {
  mutation: MutationType;
  node: Clipboard;
  updatedFields: String[];
  previousValues: ClipboardPreviousValues;
}

export interface ClipboardSubscriptionPayloadPromise
  extends Promise<ClipboardSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ClipboardPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ClipboardPreviousValuesPromise>() => T;
}

export interface ClipboardSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ClipboardSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ClipboardSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ClipboardPreviousValuesSubscription>() => T;
}

export interface User {
  id: ID_Output;
  email: String;
  password: String;
  role: UserRole;
  profileImage?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  role: () => Promise<UserRole>;
  profileImage: () => Promise<String>;
  createdBoards: <T = FragmentableArray<Board>>(args?: {
    where?: BoardWhereInput;
    orderBy?: BoardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  joinedBoards: <T = FragmentableArray<Board>>(args?: {
    where?: BoardWhereInput;
    orderBy?: BoardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdCards: <T = FragmentableArray<Card>>(args?: {
    where?: CardWhereInput;
    orderBy?: CardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdClipboards: <T = FragmentableArray<Clipboard>>(args?: {
    where?: ClipboardWhereInput;
    orderBy?: ClipboardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<UserRole>>;
  profileImage: () => Promise<AsyncIterator<String>>;
  createdBoards: <T = Promise<AsyncIterator<BoardSubscription>>>(args?: {
    where?: BoardWhereInput;
    orderBy?: BoardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  joinedBoards: <T = Promise<AsyncIterator<BoardSubscription>>>(args?: {
    where?: BoardWhereInput;
    orderBy?: BoardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdCards: <T = Promise<AsyncIterator<CardSubscription>>>(args?: {
    where?: CardWhereInput;
    orderBy?: CardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdClipboards: <
    T = Promise<AsyncIterator<ClipboardSubscription>>
  >(args?: {
    where?: ClipboardWhereInput;
    orderBy?: ClipboardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  role: () => Promise<UserRole>;
  profileImage: () => Promise<String>;
  createdBoards: <T = FragmentableArray<Board>>(args?: {
    where?: BoardWhereInput;
    orderBy?: BoardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  joinedBoards: <T = FragmentableArray<Board>>(args?: {
    where?: BoardWhereInput;
    orderBy?: BoardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdCards: <T = FragmentableArray<Card>>(args?: {
    where?: CardWhereInput;
    orderBy?: CardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdClipboards: <T = FragmentableArray<Clipboard>>(args?: {
    where?: ClipboardWhereInput;
    orderBy?: ClipboardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CardEdge {
  node: Card;
  cursor: String;
}

export interface CardEdgePromise extends Promise<CardEdge>, Fragmentable {
  node: <T = CardPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CardEdgeSubscription
  extends Promise<AsyncIterator<CardEdge>>,
    Fragmentable {
  node: <T = CardSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateClipboard {
  count: Int;
}

export interface AggregateClipboardPromise
  extends Promise<AggregateClipboard>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateClipboardSubscription
  extends Promise<AsyncIterator<AggregateClipboard>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Long = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Board",
    embedded: false
  },
  {
    name: "Card",
    embedded: false
  },
  {
    name: "File",
    embedded: false
  },
  {
    name: "FileType",
    embedded: false
  },
  {
    name: "Clipboard",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "UserRole",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `${process.env['PRISMA_ENDPOINT, "http://localhost:4466"']}`,
  secret: `mysecret42`
});
export const prisma = new Prisma();
