type AggregateBoard {
  count: Int!
}

type AggregateCard {
  count: Int!
}

type AggregateClipboard {
  count: Int!
}

type AggregateFile {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Board {
  id: ID!
  title: String!
  slug: String!
  creator: User!
  member(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  isPublic: Boolean!
  cards(where: CardWhereInput, orderBy: CardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Card!]
}

type BoardConnection {
  pageInfo: PageInfo!
  edges: [BoardEdge]!
  aggregate: AggregateBoard!
}

input BoardCreateInput {
  id: ID
  title: String!
  slug: String!
  creator: UserCreateOneWithoutCreatedBoardsInput!
  member: UserCreateManyWithoutJoinedBoardsInput
  isPublic: Boolean
  cards: CardCreateManyWithoutParentInput
}

input BoardCreateManyWithoutCreatorInput {
  create: [BoardCreateWithoutCreatorInput!]
  connect: [BoardWhereUniqueInput!]
}

input BoardCreateManyWithoutMemberInput {
  create: [BoardCreateWithoutMemberInput!]
  connect: [BoardWhereUniqueInput!]
}

input BoardCreateOneWithoutCardsInput {
  create: BoardCreateWithoutCardsInput
  connect: BoardWhereUniqueInput
}

input BoardCreateWithoutCardsInput {
  id: ID
  title: String!
  slug: String!
  creator: UserCreateOneWithoutCreatedBoardsInput!
  member: UserCreateManyWithoutJoinedBoardsInput
  isPublic: Boolean
}

input BoardCreateWithoutCreatorInput {
  id: ID
  title: String!
  slug: String!
  member: UserCreateManyWithoutJoinedBoardsInput
  isPublic: Boolean
  cards: CardCreateManyWithoutParentInput
}

input BoardCreateWithoutMemberInput {
  id: ID
  title: String!
  slug: String!
  creator: UserCreateOneWithoutCreatedBoardsInput!
  isPublic: Boolean
  cards: CardCreateManyWithoutParentInput
}

type BoardEdge {
  node: Board!
  cursor: String!
}

enum BoardOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  slug_ASC
  slug_DESC
  isPublic_ASC
  isPublic_DESC
}

type BoardPreviousValues {
  id: ID!
  title: String!
  slug: String!
  isPublic: Boolean!
}

input BoardScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  isPublic: Boolean
  isPublic_not: Boolean
  AND: [BoardScalarWhereInput!]
  OR: [BoardScalarWhereInput!]
  NOT: [BoardScalarWhereInput!]
}

type BoardSubscriptionPayload {
  mutation: MutationType!
  node: Board
  updatedFields: [String!]
  previousValues: BoardPreviousValues
}

input BoardSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BoardWhereInput
  AND: [BoardSubscriptionWhereInput!]
  OR: [BoardSubscriptionWhereInput!]
  NOT: [BoardSubscriptionWhereInput!]
}

input BoardUpdateInput {
  title: String
  slug: String
  creator: UserUpdateOneRequiredWithoutCreatedBoardsInput
  member: UserUpdateManyWithoutJoinedBoardsInput
  isPublic: Boolean
  cards: CardUpdateManyWithoutParentInput
}

input BoardUpdateManyDataInput {
  title: String
  slug: String
  isPublic: Boolean
}

input BoardUpdateManyMutationInput {
  title: String
  slug: String
  isPublic: Boolean
}

input BoardUpdateManyWithoutCreatorInput {
  create: [BoardCreateWithoutCreatorInput!]
  delete: [BoardWhereUniqueInput!]
  connect: [BoardWhereUniqueInput!]
  set: [BoardWhereUniqueInput!]
  disconnect: [BoardWhereUniqueInput!]
  update: [BoardUpdateWithWhereUniqueWithoutCreatorInput!]
  upsert: [BoardUpsertWithWhereUniqueWithoutCreatorInput!]
  deleteMany: [BoardScalarWhereInput!]
  updateMany: [BoardUpdateManyWithWhereNestedInput!]
}

input BoardUpdateManyWithoutMemberInput {
  create: [BoardCreateWithoutMemberInput!]
  delete: [BoardWhereUniqueInput!]
  connect: [BoardWhereUniqueInput!]
  set: [BoardWhereUniqueInput!]
  disconnect: [BoardWhereUniqueInput!]
  update: [BoardUpdateWithWhereUniqueWithoutMemberInput!]
  upsert: [BoardUpsertWithWhereUniqueWithoutMemberInput!]
  deleteMany: [BoardScalarWhereInput!]
  updateMany: [BoardUpdateManyWithWhereNestedInput!]
}

input BoardUpdateManyWithWhereNestedInput {
  where: BoardScalarWhereInput!
  data: BoardUpdateManyDataInput!
}

input BoardUpdateOneWithoutCardsInput {
  create: BoardCreateWithoutCardsInput
  update: BoardUpdateWithoutCardsDataInput
  upsert: BoardUpsertWithoutCardsInput
  delete: Boolean
  disconnect: Boolean
  connect: BoardWhereUniqueInput
}

input BoardUpdateWithoutCardsDataInput {
  title: String
  slug: String
  creator: UserUpdateOneRequiredWithoutCreatedBoardsInput
  member: UserUpdateManyWithoutJoinedBoardsInput
  isPublic: Boolean
}

input BoardUpdateWithoutCreatorDataInput {
  title: String
  slug: String
  member: UserUpdateManyWithoutJoinedBoardsInput
  isPublic: Boolean
  cards: CardUpdateManyWithoutParentInput
}

input BoardUpdateWithoutMemberDataInput {
  title: String
  slug: String
  creator: UserUpdateOneRequiredWithoutCreatedBoardsInput
  isPublic: Boolean
  cards: CardUpdateManyWithoutParentInput
}

input BoardUpdateWithWhereUniqueWithoutCreatorInput {
  where: BoardWhereUniqueInput!
  data: BoardUpdateWithoutCreatorDataInput!
}

input BoardUpdateWithWhereUniqueWithoutMemberInput {
  where: BoardWhereUniqueInput!
  data: BoardUpdateWithoutMemberDataInput!
}

input BoardUpsertWithoutCardsInput {
  update: BoardUpdateWithoutCardsDataInput!
  create: BoardCreateWithoutCardsInput!
}

input BoardUpsertWithWhereUniqueWithoutCreatorInput {
  where: BoardWhereUniqueInput!
  update: BoardUpdateWithoutCreatorDataInput!
  create: BoardCreateWithoutCreatorInput!
}

input BoardUpsertWithWhereUniqueWithoutMemberInput {
  where: BoardWhereUniqueInput!
  update: BoardUpdateWithoutMemberDataInput!
  create: BoardCreateWithoutMemberInput!
}

input BoardWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  creator: UserWhereInput
  member_every: UserWhereInput
  member_some: UserWhereInput
  member_none: UserWhereInput
  isPublic: Boolean
  isPublic_not: Boolean
  cards_every: CardWhereInput
  cards_some: CardWhereInput
  cards_none: CardWhereInput
  AND: [BoardWhereInput!]
  OR: [BoardWhereInput!]
  NOT: [BoardWhereInput!]
}

input BoardWhereUniqueInput {
  id: ID
}

type Card {
  id: ID!
  creator: User!
  parent: Board
  title: String!
  slug: String!
  content: String
  isPublic: Boolean!
  archived: Boolean!
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File!]
}

type CardConnection {
  pageInfo: PageInfo!
  edges: [CardEdge]!
  aggregate: AggregateCard!
}

input CardCreateInput {
  id: ID
  creator: UserCreateOneWithoutCreatedCardsInput!
  parent: BoardCreateOneWithoutCardsInput
  title: String!
  slug: String!
  content: String
  isPublic: Boolean
  archived: Boolean
  files: FileCreateManyWithoutCardInput
}

input CardCreateManyWithoutCreatorInput {
  create: [CardCreateWithoutCreatorInput!]
  connect: [CardWhereUniqueInput!]
}

input CardCreateManyWithoutParentInput {
  create: [CardCreateWithoutParentInput!]
  connect: [CardWhereUniqueInput!]
}

input CardCreateOneWithoutFilesInput {
  create: CardCreateWithoutFilesInput
  connect: CardWhereUniqueInput
}

input CardCreateWithoutCreatorInput {
  id: ID
  parent: BoardCreateOneWithoutCardsInput
  title: String!
  slug: String!
  content: String
  isPublic: Boolean
  archived: Boolean
  files: FileCreateManyWithoutCardInput
}

input CardCreateWithoutFilesInput {
  id: ID
  creator: UserCreateOneWithoutCreatedCardsInput!
  parent: BoardCreateOneWithoutCardsInput
  title: String!
  slug: String!
  content: String
  isPublic: Boolean
  archived: Boolean
}

input CardCreateWithoutParentInput {
  id: ID
  creator: UserCreateOneWithoutCreatedCardsInput!
  title: String!
  slug: String!
  content: String
  isPublic: Boolean
  archived: Boolean
  files: FileCreateManyWithoutCardInput
}

type CardEdge {
  node: Card!
  cursor: String!
}

enum CardOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  slug_ASC
  slug_DESC
  content_ASC
  content_DESC
  isPublic_ASC
  isPublic_DESC
  archived_ASC
  archived_DESC
}

type CardPreviousValues {
  id: ID!
  title: String!
  slug: String!
  content: String
  isPublic: Boolean!
  archived: Boolean!
}

input CardScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  isPublic: Boolean
  isPublic_not: Boolean
  archived: Boolean
  archived_not: Boolean
  AND: [CardScalarWhereInput!]
  OR: [CardScalarWhereInput!]
  NOT: [CardScalarWhereInput!]
}

type CardSubscriptionPayload {
  mutation: MutationType!
  node: Card
  updatedFields: [String!]
  previousValues: CardPreviousValues
}

input CardSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CardWhereInput
  AND: [CardSubscriptionWhereInput!]
  OR: [CardSubscriptionWhereInput!]
  NOT: [CardSubscriptionWhereInput!]
}

input CardUpdateInput {
  creator: UserUpdateOneRequiredWithoutCreatedCardsInput
  parent: BoardUpdateOneWithoutCardsInput
  title: String
  slug: String
  content: String
  isPublic: Boolean
  archived: Boolean
  files: FileUpdateManyWithoutCardInput
}

input CardUpdateManyDataInput {
  title: String
  slug: String
  content: String
  isPublic: Boolean
  archived: Boolean
}

input CardUpdateManyMutationInput {
  title: String
  slug: String
  content: String
  isPublic: Boolean
  archived: Boolean
}

input CardUpdateManyWithoutCreatorInput {
  create: [CardCreateWithoutCreatorInput!]
  delete: [CardWhereUniqueInput!]
  connect: [CardWhereUniqueInput!]
  set: [CardWhereUniqueInput!]
  disconnect: [CardWhereUniqueInput!]
  update: [CardUpdateWithWhereUniqueWithoutCreatorInput!]
  upsert: [CardUpsertWithWhereUniqueWithoutCreatorInput!]
  deleteMany: [CardScalarWhereInput!]
  updateMany: [CardUpdateManyWithWhereNestedInput!]
}

input CardUpdateManyWithoutParentInput {
  create: [CardCreateWithoutParentInput!]
  delete: [CardWhereUniqueInput!]
  connect: [CardWhereUniqueInput!]
  set: [CardWhereUniqueInput!]
  disconnect: [CardWhereUniqueInput!]
  update: [CardUpdateWithWhereUniqueWithoutParentInput!]
  upsert: [CardUpsertWithWhereUniqueWithoutParentInput!]
  deleteMany: [CardScalarWhereInput!]
  updateMany: [CardUpdateManyWithWhereNestedInput!]
}

input CardUpdateManyWithWhereNestedInput {
  where: CardScalarWhereInput!
  data: CardUpdateManyDataInput!
}

input CardUpdateOneRequiredWithoutFilesInput {
  create: CardCreateWithoutFilesInput
  update: CardUpdateWithoutFilesDataInput
  upsert: CardUpsertWithoutFilesInput
  connect: CardWhereUniqueInput
}

input CardUpdateWithoutCreatorDataInput {
  parent: BoardUpdateOneWithoutCardsInput
  title: String
  slug: String
  content: String
  isPublic: Boolean
  archived: Boolean
  files: FileUpdateManyWithoutCardInput
}

input CardUpdateWithoutFilesDataInput {
  creator: UserUpdateOneRequiredWithoutCreatedCardsInput
  parent: BoardUpdateOneWithoutCardsInput
  title: String
  slug: String
  content: String
  isPublic: Boolean
  archived: Boolean
}

input CardUpdateWithoutParentDataInput {
  creator: UserUpdateOneRequiredWithoutCreatedCardsInput
  title: String
  slug: String
  content: String
  isPublic: Boolean
  archived: Boolean
  files: FileUpdateManyWithoutCardInput
}

input CardUpdateWithWhereUniqueWithoutCreatorInput {
  where: CardWhereUniqueInput!
  data: CardUpdateWithoutCreatorDataInput!
}

input CardUpdateWithWhereUniqueWithoutParentInput {
  where: CardWhereUniqueInput!
  data: CardUpdateWithoutParentDataInput!
}

input CardUpsertWithoutFilesInput {
  update: CardUpdateWithoutFilesDataInput!
  create: CardCreateWithoutFilesInput!
}

input CardUpsertWithWhereUniqueWithoutCreatorInput {
  where: CardWhereUniqueInput!
  update: CardUpdateWithoutCreatorDataInput!
  create: CardCreateWithoutCreatorInput!
}

input CardUpsertWithWhereUniqueWithoutParentInput {
  where: CardWhereUniqueInput!
  update: CardUpdateWithoutParentDataInput!
  create: CardCreateWithoutParentInput!
}

input CardWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  creator: UserWhereInput
  parent: BoardWhereInput
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  isPublic: Boolean
  isPublic_not: Boolean
  archived: Boolean
  archived_not: Boolean
  files_every: FileWhereInput
  files_some: FileWhereInput
  files_none: FileWhereInput
  AND: [CardWhereInput!]
  OR: [CardWhereInput!]
  NOT: [CardWhereInput!]
}

input CardWhereUniqueInput {
  id: ID
  slug: String
}

type Clipboard {
  id: ID!
  creator: User!
  content: String!
  archived: Boolean!
}

type ClipboardConnection {
  pageInfo: PageInfo!
  edges: [ClipboardEdge]!
  aggregate: AggregateClipboard!
}

input ClipboardCreateInput {
  id: ID
  creator: UserCreateOneWithoutCreatedClipboardsInput!
  content: String!
  archived: Boolean
}

input ClipboardCreateManyWithoutCreatorInput {
  create: [ClipboardCreateWithoutCreatorInput!]
  connect: [ClipboardWhereUniqueInput!]
}

input ClipboardCreateWithoutCreatorInput {
  id: ID
  content: String!
  archived: Boolean
}

type ClipboardEdge {
  node: Clipboard!
  cursor: String!
}

enum ClipboardOrderByInput {
  id_ASC
  id_DESC
  content_ASC
  content_DESC
  archived_ASC
  archived_DESC
}

type ClipboardPreviousValues {
  id: ID!
  content: String!
  archived: Boolean!
}

input ClipboardScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  archived: Boolean
  archived_not: Boolean
  AND: [ClipboardScalarWhereInput!]
  OR: [ClipboardScalarWhereInput!]
  NOT: [ClipboardScalarWhereInput!]
}

type ClipboardSubscriptionPayload {
  mutation: MutationType!
  node: Clipboard
  updatedFields: [String!]
  previousValues: ClipboardPreviousValues
}

input ClipboardSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ClipboardWhereInput
  AND: [ClipboardSubscriptionWhereInput!]
  OR: [ClipboardSubscriptionWhereInput!]
  NOT: [ClipboardSubscriptionWhereInput!]
}

input ClipboardUpdateInput {
  creator: UserUpdateOneRequiredWithoutCreatedClipboardsInput
  content: String
  archived: Boolean
}

input ClipboardUpdateManyDataInput {
  content: String
  archived: Boolean
}

input ClipboardUpdateManyMutationInput {
  content: String
  archived: Boolean
}

input ClipboardUpdateManyWithoutCreatorInput {
  create: [ClipboardCreateWithoutCreatorInput!]
  delete: [ClipboardWhereUniqueInput!]
  connect: [ClipboardWhereUniqueInput!]
  set: [ClipboardWhereUniqueInput!]
  disconnect: [ClipboardWhereUniqueInput!]
  update: [ClipboardUpdateWithWhereUniqueWithoutCreatorInput!]
  upsert: [ClipboardUpsertWithWhereUniqueWithoutCreatorInput!]
  deleteMany: [ClipboardScalarWhereInput!]
  updateMany: [ClipboardUpdateManyWithWhereNestedInput!]
}

input ClipboardUpdateManyWithWhereNestedInput {
  where: ClipboardScalarWhereInput!
  data: ClipboardUpdateManyDataInput!
}

input ClipboardUpdateWithoutCreatorDataInput {
  content: String
  archived: Boolean
}

input ClipboardUpdateWithWhereUniqueWithoutCreatorInput {
  where: ClipboardWhereUniqueInput!
  data: ClipboardUpdateWithoutCreatorDataInput!
}

input ClipboardUpsertWithWhereUniqueWithoutCreatorInput {
  where: ClipboardWhereUniqueInput!
  update: ClipboardUpdateWithoutCreatorDataInput!
  create: ClipboardCreateWithoutCreatorInput!
}

input ClipboardWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  creator: UserWhereInput
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  archived: Boolean
  archived_not: Boolean
  AND: [ClipboardWhereInput!]
  OR: [ClipboardWhereInput!]
  NOT: [ClipboardWhereInput!]
}

input ClipboardWhereUniqueInput {
  id: ID
}

type File {
  id: ID!
  card: Card!
  type: FileType
  filename: String!
}

type FileConnection {
  pageInfo: PageInfo!
  edges: [FileEdge]!
  aggregate: AggregateFile!
}

input FileCreateInput {
  id: ID
  card: CardCreateOneWithoutFilesInput!
  type: FileType
  filename: String!
}

input FileCreateManyWithoutCardInput {
  create: [FileCreateWithoutCardInput!]
  connect: [FileWhereUniqueInput!]
}

input FileCreateWithoutCardInput {
  id: ID
  type: FileType
  filename: String!
}

type FileEdge {
  node: File!
  cursor: String!
}

enum FileOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  filename_ASC
  filename_DESC
}

type FilePreviousValues {
  id: ID!
  type: FileType
  filename: String!
}

input FileScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: FileType
  type_not: FileType
  type_in: [FileType!]
  type_not_in: [FileType!]
  filename: String
  filename_not: String
  filename_in: [String!]
  filename_not_in: [String!]
  filename_lt: String
  filename_lte: String
  filename_gt: String
  filename_gte: String
  filename_contains: String
  filename_not_contains: String
  filename_starts_with: String
  filename_not_starts_with: String
  filename_ends_with: String
  filename_not_ends_with: String
  AND: [FileScalarWhereInput!]
  OR: [FileScalarWhereInput!]
  NOT: [FileScalarWhereInput!]
}

type FileSubscriptionPayload {
  mutation: MutationType!
  node: File
  updatedFields: [String!]
  previousValues: FilePreviousValues
}

input FileSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FileWhereInput
  AND: [FileSubscriptionWhereInput!]
  OR: [FileSubscriptionWhereInput!]
  NOT: [FileSubscriptionWhereInput!]
}

enum FileType {
  IMAGE
  DOCUMENT
  OTHER
}

input FileUpdateInput {
  card: CardUpdateOneRequiredWithoutFilesInput
  type: FileType
  filename: String
}

input FileUpdateManyDataInput {
  type: FileType
  filename: String
}

input FileUpdateManyMutationInput {
  type: FileType
  filename: String
}

input FileUpdateManyWithoutCardInput {
  create: [FileCreateWithoutCardInput!]
  delete: [FileWhereUniqueInput!]
  connect: [FileWhereUniqueInput!]
  set: [FileWhereUniqueInput!]
  disconnect: [FileWhereUniqueInput!]
  update: [FileUpdateWithWhereUniqueWithoutCardInput!]
  upsert: [FileUpsertWithWhereUniqueWithoutCardInput!]
  deleteMany: [FileScalarWhereInput!]
  updateMany: [FileUpdateManyWithWhereNestedInput!]
}

input FileUpdateManyWithWhereNestedInput {
  where: FileScalarWhereInput!
  data: FileUpdateManyDataInput!
}

input FileUpdateWithoutCardDataInput {
  type: FileType
  filename: String
}

input FileUpdateWithWhereUniqueWithoutCardInput {
  where: FileWhereUniqueInput!
  data: FileUpdateWithoutCardDataInput!
}

input FileUpsertWithWhereUniqueWithoutCardInput {
  where: FileWhereUniqueInput!
  update: FileUpdateWithoutCardDataInput!
  create: FileCreateWithoutCardInput!
}

input FileWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  card: CardWhereInput
  type: FileType
  type_not: FileType
  type_in: [FileType!]
  type_not_in: [FileType!]
  filename: String
  filename_not: String
  filename_in: [String!]
  filename_not_in: [String!]
  filename_lt: String
  filename_lte: String
  filename_gt: String
  filename_gte: String
  filename_contains: String
  filename_not_contains: String
  filename_starts_with: String
  filename_not_starts_with: String
  filename_ends_with: String
  filename_not_ends_with: String
  AND: [FileWhereInput!]
  OR: [FileWhereInput!]
  NOT: [FileWhereInput!]
}

input FileWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createBoard(data: BoardCreateInput!): Board!
  updateBoard(data: BoardUpdateInput!, where: BoardWhereUniqueInput!): Board
  updateManyBoards(data: BoardUpdateManyMutationInput!, where: BoardWhereInput): BatchPayload!
  upsertBoard(where: BoardWhereUniqueInput!, create: BoardCreateInput!, update: BoardUpdateInput!): Board!
  deleteBoard(where: BoardWhereUniqueInput!): Board
  deleteManyBoards(where: BoardWhereInput): BatchPayload!
  createCard(data: CardCreateInput!): Card!
  updateCard(data: CardUpdateInput!, where: CardWhereUniqueInput!): Card
  updateManyCards(data: CardUpdateManyMutationInput!, where: CardWhereInput): BatchPayload!
  upsertCard(where: CardWhereUniqueInput!, create: CardCreateInput!, update: CardUpdateInput!): Card!
  deleteCard(where: CardWhereUniqueInput!): Card
  deleteManyCards(where: CardWhereInput): BatchPayload!
  createClipboard(data: ClipboardCreateInput!): Clipboard!
  updateClipboard(data: ClipboardUpdateInput!, where: ClipboardWhereUniqueInput!): Clipboard
  updateManyClipboards(data: ClipboardUpdateManyMutationInput!, where: ClipboardWhereInput): BatchPayload!
  upsertClipboard(where: ClipboardWhereUniqueInput!, create: ClipboardCreateInput!, update: ClipboardUpdateInput!): Clipboard!
  deleteClipboard(where: ClipboardWhereUniqueInput!): Clipboard
  deleteManyClipboards(where: ClipboardWhereInput): BatchPayload!
  createFile(data: FileCreateInput!): File!
  updateFile(data: FileUpdateInput!, where: FileWhereUniqueInput!): File
  updateManyFiles(data: FileUpdateManyMutationInput!, where: FileWhereInput): BatchPayload!
  upsertFile(where: FileWhereUniqueInput!, create: FileCreateInput!, update: FileUpdateInput!): File!
  deleteFile(where: FileWhereUniqueInput!): File
  deleteManyFiles(where: FileWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  board(where: BoardWhereUniqueInput!): Board
  boards(where: BoardWhereInput, orderBy: BoardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Board]!
  boardsConnection(where: BoardWhereInput, orderBy: BoardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BoardConnection!
  card(where: CardWhereUniqueInput!): Card
  cards(where: CardWhereInput, orderBy: CardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Card]!
  cardsConnection(where: CardWhereInput, orderBy: CardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CardConnection!
  clipboard(where: ClipboardWhereUniqueInput!): Clipboard
  clipboards(where: ClipboardWhereInput, orderBy: ClipboardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Clipboard]!
  clipboardsConnection(where: ClipboardWhereInput, orderBy: ClipboardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ClipboardConnection!
  file(where: FileWhereUniqueInput!): File
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File]!
  filesConnection(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FileConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  board(where: BoardSubscriptionWhereInput): BoardSubscriptionPayload
  card(where: CardSubscriptionWhereInput): CardSubscriptionPayload
  clipboard(where: ClipboardSubscriptionWhereInput): ClipboardSubscriptionPayload
  file(where: FileSubscriptionWhereInput): FileSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  email: String!
  password: String!
  role: UserRole!
  profileImage: String
  createdBoards(where: BoardWhereInput, orderBy: BoardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Board!]
  joinedBoards(where: BoardWhereInput, orderBy: BoardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Board!]
  createdCards(where: CardWhereInput, orderBy: CardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Card!]
  createdClipboards(where: ClipboardWhereInput, orderBy: ClipboardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Clipboard!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  email: String!
  password: String!
  role: UserRole!
  profileImage: String
  createdBoards: BoardCreateManyWithoutCreatorInput
  joinedBoards: BoardCreateManyWithoutMemberInput
  createdCards: CardCreateManyWithoutCreatorInput
  createdClipboards: ClipboardCreateManyWithoutCreatorInput
}

input UserCreateManyWithoutJoinedBoardsInput {
  create: [UserCreateWithoutJoinedBoardsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutCreatedBoardsInput {
  create: UserCreateWithoutCreatedBoardsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCreatedCardsInput {
  create: UserCreateWithoutCreatedCardsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCreatedClipboardsInput {
  create: UserCreateWithoutCreatedClipboardsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCreatedBoardsInput {
  id: ID
  email: String!
  password: String!
  role: UserRole!
  profileImage: String
  joinedBoards: BoardCreateManyWithoutMemberInput
  createdCards: CardCreateManyWithoutCreatorInput
  createdClipboards: ClipboardCreateManyWithoutCreatorInput
}

input UserCreateWithoutCreatedCardsInput {
  id: ID
  email: String!
  password: String!
  role: UserRole!
  profileImage: String
  createdBoards: BoardCreateManyWithoutCreatorInput
  joinedBoards: BoardCreateManyWithoutMemberInput
  createdClipboards: ClipboardCreateManyWithoutCreatorInput
}

input UserCreateWithoutCreatedClipboardsInput {
  id: ID
  email: String!
  password: String!
  role: UserRole!
  profileImage: String
  createdBoards: BoardCreateManyWithoutCreatorInput
  joinedBoards: BoardCreateManyWithoutMemberInput
  createdCards: CardCreateManyWithoutCreatorInput
}

input UserCreateWithoutJoinedBoardsInput {
  id: ID
  email: String!
  password: String!
  role: UserRole!
  profileImage: String
  createdBoards: BoardCreateManyWithoutCreatorInput
  createdCards: CardCreateManyWithoutCreatorInput
  createdClipboards: ClipboardCreateManyWithoutCreatorInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  role_ASC
  role_DESC
  profileImage_ASC
  profileImage_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
  role: UserRole!
  profileImage: String
}

enum UserRole {
  NORMAL
  ADMIN
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  role: UserRole
  role_not: UserRole
  role_in: [UserRole!]
  role_not_in: [UserRole!]
  profileImage: String
  profileImage_not: String
  profileImage_in: [String!]
  profileImage_not_in: [String!]
  profileImage_lt: String
  profileImage_lte: String
  profileImage_gt: String
  profileImage_gte: String
  profileImage_contains: String
  profileImage_not_contains: String
  profileImage_starts_with: String
  profileImage_not_starts_with: String
  profileImage_ends_with: String
  profileImage_not_ends_with: String
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  email: String
  password: String
  role: UserRole
  profileImage: String
  createdBoards: BoardUpdateManyWithoutCreatorInput
  joinedBoards: BoardUpdateManyWithoutMemberInput
  createdCards: CardUpdateManyWithoutCreatorInput
  createdClipboards: ClipboardUpdateManyWithoutCreatorInput
}

input UserUpdateManyDataInput {
  email: String
  password: String
  role: UserRole
  profileImage: String
}

input UserUpdateManyMutationInput {
  email: String
  password: String
  role: UserRole
  profileImage: String
}

input UserUpdateManyWithoutJoinedBoardsInput {
  create: [UserCreateWithoutJoinedBoardsInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutJoinedBoardsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutJoinedBoardsInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredWithoutCreatedBoardsInput {
  create: UserCreateWithoutCreatedBoardsInput
  update: UserUpdateWithoutCreatedBoardsDataInput
  upsert: UserUpsertWithoutCreatedBoardsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutCreatedCardsInput {
  create: UserCreateWithoutCreatedCardsInput
  update: UserUpdateWithoutCreatedCardsDataInput
  upsert: UserUpsertWithoutCreatedCardsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutCreatedClipboardsInput {
  create: UserCreateWithoutCreatedClipboardsInput
  update: UserUpdateWithoutCreatedClipboardsDataInput
  upsert: UserUpsertWithoutCreatedClipboardsInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutCreatedBoardsDataInput {
  email: String
  password: String
  role: UserRole
  profileImage: String
  joinedBoards: BoardUpdateManyWithoutMemberInput
  createdCards: CardUpdateManyWithoutCreatorInput
  createdClipboards: ClipboardUpdateManyWithoutCreatorInput
}

input UserUpdateWithoutCreatedCardsDataInput {
  email: String
  password: String
  role: UserRole
  profileImage: String
  createdBoards: BoardUpdateManyWithoutCreatorInput
  joinedBoards: BoardUpdateManyWithoutMemberInput
  createdClipboards: ClipboardUpdateManyWithoutCreatorInput
}

input UserUpdateWithoutCreatedClipboardsDataInput {
  email: String
  password: String
  role: UserRole
  profileImage: String
  createdBoards: BoardUpdateManyWithoutCreatorInput
  joinedBoards: BoardUpdateManyWithoutMemberInput
  createdCards: CardUpdateManyWithoutCreatorInput
}

input UserUpdateWithoutJoinedBoardsDataInput {
  email: String
  password: String
  role: UserRole
  profileImage: String
  createdBoards: BoardUpdateManyWithoutCreatorInput
  createdCards: CardUpdateManyWithoutCreatorInput
  createdClipboards: ClipboardUpdateManyWithoutCreatorInput
}

input UserUpdateWithWhereUniqueWithoutJoinedBoardsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutJoinedBoardsDataInput!
}

input UserUpsertWithoutCreatedBoardsInput {
  update: UserUpdateWithoutCreatedBoardsDataInput!
  create: UserCreateWithoutCreatedBoardsInput!
}

input UserUpsertWithoutCreatedCardsInput {
  update: UserUpdateWithoutCreatedCardsDataInput!
  create: UserCreateWithoutCreatedCardsInput!
}

input UserUpsertWithoutCreatedClipboardsInput {
  update: UserUpdateWithoutCreatedClipboardsDataInput!
  create: UserCreateWithoutCreatedClipboardsInput!
}

input UserUpsertWithWhereUniqueWithoutJoinedBoardsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutJoinedBoardsDataInput!
  create: UserCreateWithoutJoinedBoardsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  role: UserRole
  role_not: UserRole
  role_in: [UserRole!]
  role_not_in: [UserRole!]
  profileImage: String
  profileImage_not: String
  profileImage_in: [String!]
  profileImage_not_in: [String!]
  profileImage_lt: String
  profileImage_lte: String
  profileImage_gt: String
  profileImage_gte: String
  profileImage_contains: String
  profileImage_not_contains: String
  profileImage_starts_with: String
  profileImage_not_starts_with: String
  profileImage_ends_with: String
  profileImage_not_ends_with: String
  createdBoards_every: BoardWhereInput
  createdBoards_some: BoardWhereInput
  createdBoards_none: BoardWhereInput
  joinedBoards_every: BoardWhereInput
  joinedBoards_some: BoardWhereInput
  joinedBoards_none: BoardWhereInput
  createdCards_every: CardWhereInput
  createdCards_some: CardWhereInput
  createdCards_none: CardWhereInput
  createdClipboards_every: ClipboardWhereInput
  createdClipboards_some: ClipboardWhereInput
  createdClipboards_none: ClipboardWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
