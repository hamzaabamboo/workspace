// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from "graphql";
import {
  Board,
  User,
  Card,
  File,
  Clipboard,
  CardSubscriptionPayload,
  CardPreviousValues
} from "./generated/prisma";
import { AuthPayload } from "./models";
import { Context } from "./types";

export type UserRole = "NORMAL" | "ADMIN";
export type BoardOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "slug_ASC"
  | "slug_DESC"
  | "isPublic_ASC"
  | "isPublic_DESC";
export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "role_ASC"
  | "role_DESC"
  | "profileImage_ASC"
  | "profileImage_DESC";
export type FileType = "IMAGE" | "DOCUMENT" | "OTHER";
export type FileOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "filename_ASC"
  | "filename_DESC";
export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export type GetBoardsResolver =
    | ((
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Array<Board | null> | Promise<Array<Board | null>>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Array<Board | null> | Promise<Array<Board | null>>;
      };

  export type GetCardsResolver =
    | ((
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Array<Card | null> | Promise<Array<Card | null>>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Array<Card | null> | Promise<Array<Card | null>>;
      };

  export type GetClipboardsResolver =
    | ((
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Array<Clipboard | null> | Promise<Array<Clipboard | null>>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Array<Clipboard | null> | Promise<Array<Clipboard | null>>;
      };

  export type HelloResolver =
    | ((
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type CurrentUserResolver =
    | ((
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | Promise<User>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>;
      };

  export interface Type {
    getBoards:
      | ((
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Array<Board | null> | Promise<Array<Board | null>>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Array<Board | null> | Promise<Array<Board | null>>;
        };

    getCards:
      | ((
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Array<Card | null> | Promise<Array<Card | null>>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Array<Card | null> | Promise<Array<Card | null>>;
        };

    getClipboards:
      | ((
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Array<Clipboard | null> | Promise<Array<Clipboard | null>>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Array<Clipboard | null> | Promise<Array<Clipboard | null>>;
        };

    hello:
      | ((
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    currentUser:
      | ((
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | Promise<User>;
        };
  }
}

export namespace BoardResolvers {
  export const defaultResolvers = {
    id: (parent: Board) => parent.id,
    title: (parent: Board) => parent.title,
    slug: (parent: Board) => parent.slug,
    creator: (parent: Board) => parent.creator,
    isPublic: (parent: Board) => parent.isPublic
  };

  export interface UserWhereInput {
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    email?: string | null;
    email_not?: string | null;
    email_in?: string[] | null;
    email_not_in?: string[] | null;
    email_lt?: string | null;
    email_lte?: string | null;
    email_gt?: string | null;
    email_gte?: string | null;
    email_contains?: string | null;
    email_not_contains?: string | null;
    email_starts_with?: string | null;
    email_not_starts_with?: string | null;
    email_ends_with?: string | null;
    email_not_ends_with?: string | null;
    password?: string | null;
    password_not?: string | null;
    password_in?: string[] | null;
    password_not_in?: string[] | null;
    password_lt?: string | null;
    password_lte?: string | null;
    password_gt?: string | null;
    password_gte?: string | null;
    password_contains?: string | null;
    password_not_contains?: string | null;
    password_starts_with?: string | null;
    password_not_starts_with?: string | null;
    password_ends_with?: string | null;
    password_not_ends_with?: string | null;
    role?: UserRole | null;
    role_not?: UserRole | null;
    role_in?: UserRole[] | null;
    role_not_in?: UserRole[] | null;
    profileImage?: string | null;
    profileImage_not?: string | null;
    profileImage_in?: string[] | null;
    profileImage_not_in?: string[] | null;
    profileImage_lt?: string | null;
    profileImage_lte?: string | null;
    profileImage_gt?: string | null;
    profileImage_gte?: string | null;
    profileImage_contains?: string | null;
    profileImage_not_contains?: string | null;
    profileImage_starts_with?: string | null;
    profileImage_not_starts_with?: string | null;
    profileImage_ends_with?: string | null;
    profileImage_not_ends_with?: string | null;
    createdBoards_every?: BoardWhereInput | null;
    createdBoards_some?: BoardWhereInput | null;
    createdBoards_none?: BoardWhereInput | null;
    joinedBoards_every?: BoardWhereInput | null;
    joinedBoards_some?: BoardWhereInput | null;
    joinedBoards_none?: BoardWhereInput | null;
    AND?: UserWhereInput[] | null;
    OR?: UserWhereInput[] | null;
    NOT?: UserWhereInput[] | null;
  }
  export interface BoardWhereInput {
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    title?: string | null;
    title_not?: string | null;
    title_in?: string[] | null;
    title_not_in?: string[] | null;
    title_lt?: string | null;
    title_lte?: string | null;
    title_gt?: string | null;
    title_gte?: string | null;
    title_contains?: string | null;
    title_not_contains?: string | null;
    title_starts_with?: string | null;
    title_not_starts_with?: string | null;
    title_ends_with?: string | null;
    title_not_ends_with?: string | null;
    slug?: string | null;
    slug_not?: string | null;
    slug_in?: string[] | null;
    slug_not_in?: string[] | null;
    slug_lt?: string | null;
    slug_lte?: string | null;
    slug_gt?: string | null;
    slug_gte?: string | null;
    slug_contains?: string | null;
    slug_not_contains?: string | null;
    slug_starts_with?: string | null;
    slug_not_starts_with?: string | null;
    slug_ends_with?: string | null;
    slug_not_ends_with?: string | null;
    creator?: UserWhereInput | null;
    member_every?: UserWhereInput | null;
    member_some?: UserWhereInput | null;
    member_none?: UserWhereInput | null;
    isPublic?: boolean | null;
    isPublic_not?: boolean | null;
    AND?: BoardWhereInput[] | null;
    OR?: BoardWhereInput[] | null;
    NOT?: BoardWhereInput[] | null;
  }

  export interface ArgsMember {
    where?: UserWhereInput | null;
    orderBy?: UserOrderByInput | null;
    skip?: number | null;
    after?: string | null;
    before?: string | null;
    first?: number | null;
    last?: number | null;
  }

  export type IdResolver =
    | ((
        parent: Board,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Board,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type TitleResolver =
    | ((
        parent: Board,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Board,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type SlugResolver =
    | ((
        parent: Board,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Board,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type CreatorResolver =
    | ((
        parent: Board,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | Promise<User>)
    | {
        fragment: string;
        resolve: (
          parent: Board,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>;
      };

  export type MemberResolver =
    | ((
        parent: Board,
        args: ArgsMember,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User[] | null | Promise<User[] | null>)
    | {
        fragment: string;
        resolve: (
          parent: Board,
          args: ArgsMember,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User[] | null | Promise<User[] | null>;
      };

  export type IsPublicResolver =
    | ((
        parent: Board,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: Board,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export interface Type {
    id:
      | ((
          parent: Board,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Board,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    title:
      | ((
          parent: Board,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Board,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    slug:
      | ((
          parent: Board,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Board,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    creator:
      | ((
          parent: Board,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>)
      | {
          fragment: string;
          resolve: (
            parent: Board,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | Promise<User>;
        };

    member:
      | ((
          parent: Board,
          args: ArgsMember,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User[] | null | Promise<User[] | null>)
      | {
          fragment: string;
          resolve: (
            parent: Board,
            args: ArgsMember,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User[] | null | Promise<User[] | null>;
        };

    isPublic:
      | ((
          parent: Board,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: Board,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    id: (parent: User) => parent.id,
    email: (parent: User) => parent.email,
    password: (parent: User) => parent.password,
    role: (parent: User) => parent.role,
    profileImage: (parent: User) =>
      parent.profileImage === undefined ? null : parent.profileImage
  };

  export interface BoardWhereInput {
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    title?: string | null;
    title_not?: string | null;
    title_in?: string[] | null;
    title_not_in?: string[] | null;
    title_lt?: string | null;
    title_lte?: string | null;
    title_gt?: string | null;
    title_gte?: string | null;
    title_contains?: string | null;
    title_not_contains?: string | null;
    title_starts_with?: string | null;
    title_not_starts_with?: string | null;
    title_ends_with?: string | null;
    title_not_ends_with?: string | null;
    slug?: string | null;
    slug_not?: string | null;
    slug_in?: string[] | null;
    slug_not_in?: string[] | null;
    slug_lt?: string | null;
    slug_lte?: string | null;
    slug_gt?: string | null;
    slug_gte?: string | null;
    slug_contains?: string | null;
    slug_not_contains?: string | null;
    slug_starts_with?: string | null;
    slug_not_starts_with?: string | null;
    slug_ends_with?: string | null;
    slug_not_ends_with?: string | null;
    creator?: UserWhereInput | null;
    member_every?: UserWhereInput | null;
    member_some?: UserWhereInput | null;
    member_none?: UserWhereInput | null;
    isPublic?: boolean | null;
    isPublic_not?: boolean | null;
    AND?: BoardWhereInput[] | null;
    OR?: BoardWhereInput[] | null;
    NOT?: BoardWhereInput[] | null;
  }
  export interface UserWhereInput {
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    email?: string | null;
    email_not?: string | null;
    email_in?: string[] | null;
    email_not_in?: string[] | null;
    email_lt?: string | null;
    email_lte?: string | null;
    email_gt?: string | null;
    email_gte?: string | null;
    email_contains?: string | null;
    email_not_contains?: string | null;
    email_starts_with?: string | null;
    email_not_starts_with?: string | null;
    email_ends_with?: string | null;
    email_not_ends_with?: string | null;
    password?: string | null;
    password_not?: string | null;
    password_in?: string[] | null;
    password_not_in?: string[] | null;
    password_lt?: string | null;
    password_lte?: string | null;
    password_gt?: string | null;
    password_gte?: string | null;
    password_contains?: string | null;
    password_not_contains?: string | null;
    password_starts_with?: string | null;
    password_not_starts_with?: string | null;
    password_ends_with?: string | null;
    password_not_ends_with?: string | null;
    role?: UserRole | null;
    role_not?: UserRole | null;
    role_in?: UserRole[] | null;
    role_not_in?: UserRole[] | null;
    profileImage?: string | null;
    profileImage_not?: string | null;
    profileImage_in?: string[] | null;
    profileImage_not_in?: string[] | null;
    profileImage_lt?: string | null;
    profileImage_lte?: string | null;
    profileImage_gt?: string | null;
    profileImage_gte?: string | null;
    profileImage_contains?: string | null;
    profileImage_not_contains?: string | null;
    profileImage_starts_with?: string | null;
    profileImage_not_starts_with?: string | null;
    profileImage_ends_with?: string | null;
    profileImage_not_ends_with?: string | null;
    createdBoards_every?: BoardWhereInput | null;
    createdBoards_some?: BoardWhereInput | null;
    createdBoards_none?: BoardWhereInput | null;
    joinedBoards_every?: BoardWhereInput | null;
    joinedBoards_some?: BoardWhereInput | null;
    joinedBoards_none?: BoardWhereInput | null;
    AND?: UserWhereInput[] | null;
    OR?: UserWhereInput[] | null;
    NOT?: UserWhereInput[] | null;
  }

  export interface ArgsCreatedBoards {
    where?: BoardWhereInput | null;
    orderBy?: BoardOrderByInput | null;
    skip?: number | null;
    after?: string | null;
    before?: string | null;
    first?: number | null;
    last?: number | null;
  }

  export interface ArgsJoinedBoards {
    where?: BoardWhereInput | null;
    orderBy?: BoardOrderByInput | null;
    skip?: number | null;
    after?: string | null;
    before?: string | null;
    first?: number | null;
    last?: number | null;
  }

  export type IdResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type EmailResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type PasswordResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type RoleResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => UserRole | Promise<UserRole>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => UserRole | Promise<UserRole>;
      };

  export type ProfileImageResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type CreatedBoardsResolver =
    | ((
        parent: User,
        args: ArgsCreatedBoards,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Board[] | null | Promise<Board[] | null>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: ArgsCreatedBoards,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Board[] | null | Promise<Board[] | null>;
      };

  export type JoinedBoardsResolver =
    | ((
        parent: User,
        args: ArgsJoinedBoards,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Board[] | null | Promise<Board[] | null>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: ArgsJoinedBoards,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Board[] | null | Promise<Board[] | null>;
      };

  export interface Type {
    id:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    email:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    password:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    role:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => UserRole | Promise<UserRole>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => UserRole | Promise<UserRole>;
        };

    profileImage:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    createdBoards:
      | ((
          parent: User,
          args: ArgsCreatedBoards,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Board[] | null | Promise<Board[] | null>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: ArgsCreatedBoards,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Board[] | null | Promise<Board[] | null>;
        };

    joinedBoards:
      | ((
          parent: User,
          args: ArgsJoinedBoards,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Board[] | null | Promise<Board[] | null>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: ArgsJoinedBoards,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Board[] | null | Promise<Board[] | null>;
        };
  }
}

export namespace CardResolvers {
  export const defaultResolvers = {
    id: (parent: Card) => parent.id,
    creator: (parent: Card) => parent.creator,
    parent: (parent: Card) =>
      parent.parent === undefined ? null : parent.parent,
    title: (parent: Card) => parent.title,
    slug: (parent: Card) => parent.slug,
    content: (parent: Card) =>
      parent.content === undefined ? null : parent.content,
    public: (parent: Card) => parent.public,
    archived: (parent: Card) => parent.archived
  };

  export interface FileWhereInput {
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    card?: CardWhereInput | null;
    type?: FileType | null;
    type_not?: FileType | null;
    type_in?: FileType[] | null;
    type_not_in?: FileType[] | null;
    filename?: string | null;
    filename_not?: string | null;
    filename_in?: string[] | null;
    filename_not_in?: string[] | null;
    filename_lt?: string | null;
    filename_lte?: string | null;
    filename_gt?: string | null;
    filename_gte?: string | null;
    filename_contains?: string | null;
    filename_not_contains?: string | null;
    filename_starts_with?: string | null;
    filename_not_starts_with?: string | null;
    filename_ends_with?: string | null;
    filename_not_ends_with?: string | null;
    AND?: FileWhereInput[] | null;
    OR?: FileWhereInput[] | null;
    NOT?: FileWhereInput[] | null;
  }
  export interface CardWhereInput {
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    creator?: UserWhereInput | null;
    parent?: BoardWhereInput | null;
    title?: string | null;
    title_not?: string | null;
    title_in?: string[] | null;
    title_not_in?: string[] | null;
    title_lt?: string | null;
    title_lte?: string | null;
    title_gt?: string | null;
    title_gte?: string | null;
    title_contains?: string | null;
    title_not_contains?: string | null;
    title_starts_with?: string | null;
    title_not_starts_with?: string | null;
    title_ends_with?: string | null;
    title_not_ends_with?: string | null;
    slug?: string | null;
    slug_not?: string | null;
    slug_in?: string[] | null;
    slug_not_in?: string[] | null;
    slug_lt?: string | null;
    slug_lte?: string | null;
    slug_gt?: string | null;
    slug_gte?: string | null;
    slug_contains?: string | null;
    slug_not_contains?: string | null;
    slug_starts_with?: string | null;
    slug_not_starts_with?: string | null;
    slug_ends_with?: string | null;
    slug_not_ends_with?: string | null;
    content?: string | null;
    content_not?: string | null;
    content_in?: string[] | null;
    content_not_in?: string[] | null;
    content_lt?: string | null;
    content_lte?: string | null;
    content_gt?: string | null;
    content_gte?: string | null;
    content_contains?: string | null;
    content_not_contains?: string | null;
    content_starts_with?: string | null;
    content_not_starts_with?: string | null;
    content_ends_with?: string | null;
    content_not_ends_with?: string | null;
    public?: boolean | null;
    public_not?: boolean | null;
    archived?: boolean | null;
    archived_not?: boolean | null;
    files_every?: FileWhereInput | null;
    files_some?: FileWhereInput | null;
    files_none?: FileWhereInput | null;
    AND?: CardWhereInput[] | null;
    OR?: CardWhereInput[] | null;
    NOT?: CardWhereInput[] | null;
  }
  export interface UserWhereInput {
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    email?: string | null;
    email_not?: string | null;
    email_in?: string[] | null;
    email_not_in?: string[] | null;
    email_lt?: string | null;
    email_lte?: string | null;
    email_gt?: string | null;
    email_gte?: string | null;
    email_contains?: string | null;
    email_not_contains?: string | null;
    email_starts_with?: string | null;
    email_not_starts_with?: string | null;
    email_ends_with?: string | null;
    email_not_ends_with?: string | null;
    password?: string | null;
    password_not?: string | null;
    password_in?: string[] | null;
    password_not_in?: string[] | null;
    password_lt?: string | null;
    password_lte?: string | null;
    password_gt?: string | null;
    password_gte?: string | null;
    password_contains?: string | null;
    password_not_contains?: string | null;
    password_starts_with?: string | null;
    password_not_starts_with?: string | null;
    password_ends_with?: string | null;
    password_not_ends_with?: string | null;
    role?: UserRole | null;
    role_not?: UserRole | null;
    role_in?: UserRole[] | null;
    role_not_in?: UserRole[] | null;
    profileImage?: string | null;
    profileImage_not?: string | null;
    profileImage_in?: string[] | null;
    profileImage_not_in?: string[] | null;
    profileImage_lt?: string | null;
    profileImage_lte?: string | null;
    profileImage_gt?: string | null;
    profileImage_gte?: string | null;
    profileImage_contains?: string | null;
    profileImage_not_contains?: string | null;
    profileImage_starts_with?: string | null;
    profileImage_not_starts_with?: string | null;
    profileImage_ends_with?: string | null;
    profileImage_not_ends_with?: string | null;
    createdBoards_every?: BoardWhereInput | null;
    createdBoards_some?: BoardWhereInput | null;
    createdBoards_none?: BoardWhereInput | null;
    joinedBoards_every?: BoardWhereInput | null;
    joinedBoards_some?: BoardWhereInput | null;
    joinedBoards_none?: BoardWhereInput | null;
    AND?: UserWhereInput[] | null;
    OR?: UserWhereInput[] | null;
    NOT?: UserWhereInput[] | null;
  }
  export interface BoardWhereInput {
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    title?: string | null;
    title_not?: string | null;
    title_in?: string[] | null;
    title_not_in?: string[] | null;
    title_lt?: string | null;
    title_lte?: string | null;
    title_gt?: string | null;
    title_gte?: string | null;
    title_contains?: string | null;
    title_not_contains?: string | null;
    title_starts_with?: string | null;
    title_not_starts_with?: string | null;
    title_ends_with?: string | null;
    title_not_ends_with?: string | null;
    slug?: string | null;
    slug_not?: string | null;
    slug_in?: string[] | null;
    slug_not_in?: string[] | null;
    slug_lt?: string | null;
    slug_lte?: string | null;
    slug_gt?: string | null;
    slug_gte?: string | null;
    slug_contains?: string | null;
    slug_not_contains?: string | null;
    slug_starts_with?: string | null;
    slug_not_starts_with?: string | null;
    slug_ends_with?: string | null;
    slug_not_ends_with?: string | null;
    creator?: UserWhereInput | null;
    member_every?: UserWhereInput | null;
    member_some?: UserWhereInput | null;
    member_none?: UserWhereInput | null;
    isPublic?: boolean | null;
    isPublic_not?: boolean | null;
    AND?: BoardWhereInput[] | null;
    OR?: BoardWhereInput[] | null;
    NOT?: BoardWhereInput[] | null;
  }

  export interface ArgsFiles {
    where?: FileWhereInput | null;
    orderBy?: FileOrderByInput | null;
    skip?: number | null;
    after?: string | null;
    before?: string | null;
    first?: number | null;
    last?: number | null;
  }

  export type IdResolver =
    | ((
        parent: Card,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Card,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type CreatorResolver =
    | ((
        parent: Card,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | Promise<User>)
    | {
        fragment: string;
        resolve: (
          parent: Card,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>;
      };

  export type ParentResolver =
    | ((
        parent: Card,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Board | null | Promise<Board | null>)
    | {
        fragment: string;
        resolve: (
          parent: Card,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Board | null | Promise<Board | null>;
      };

  export type TitleResolver =
    | ((
        parent: Card,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Card,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type SlugResolver =
    | ((
        parent: Card,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Card,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type ContentResolver =
    | ((
        parent: Card,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: Card,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type PublicResolver =
    | ((
        parent: Card,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: Card,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type ArchivedResolver =
    | ((
        parent: Card,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: Card,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type FilesResolver =
    | ((
        parent: Card,
        args: ArgsFiles,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => File[] | null | Promise<File[] | null>)
    | {
        fragment: string;
        resolve: (
          parent: Card,
          args: ArgsFiles,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => File[] | null | Promise<File[] | null>;
      };

  export interface Type {
    id:
      | ((
          parent: Card,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Card,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    creator:
      | ((
          parent: Card,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>)
      | {
          fragment: string;
          resolve: (
            parent: Card,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | Promise<User>;
        };

    parent:
      | ((
          parent: Card,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Board | null | Promise<Board | null>)
      | {
          fragment: string;
          resolve: (
            parent: Card,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Board | null | Promise<Board | null>;
        };

    title:
      | ((
          parent: Card,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Card,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    slug:
      | ((
          parent: Card,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Card,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    content:
      | ((
          parent: Card,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: Card,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    public:
      | ((
          parent: Card,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: Card,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    archived:
      | ((
          parent: Card,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: Card,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    files:
      | ((
          parent: Card,
          args: ArgsFiles,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => File[] | null | Promise<File[] | null>)
      | {
          fragment: string;
          resolve: (
            parent: Card,
            args: ArgsFiles,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => File[] | null | Promise<File[] | null>;
        };
  }
}

export namespace FileResolvers {
  export const defaultResolvers = {
    filename: (parent: File) => parent.filename
  };

  export type FilenameResolver =
    | ((
        parent: File,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: File,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type MimetypeResolver =
    | ((
        parent: File,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: File,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type EncodingResolver =
    | ((
        parent: File,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: File,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export interface Type {
    filename:
      | ((
          parent: File,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: File,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    mimetype:
      | ((
          parent: File,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: File,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    encoding:
      | ((
          parent: File,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: File,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };
  }
}

export namespace ClipboardResolvers {
  export const defaultResolvers = {
    id: (parent: Clipboard) => parent.id,
    creator: (parent: Clipboard) => parent.creator,
    content: (parent: Clipboard) => parent.content,
    archived: (parent: Clipboard) => parent.archived
  };

  export type IdResolver =
    | ((
        parent: Clipboard,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Clipboard,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type CreatorResolver =
    | ((
        parent: Clipboard,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | Promise<User>)
    | {
        fragment: string;
        resolve: (
          parent: Clipboard,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>;
      };

  export type ContentResolver =
    | ((
        parent: Clipboard,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Clipboard,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type ArchivedResolver =
    | ((
        parent: Clipboard,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: Clipboard,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export interface Type {
    id:
      | ((
          parent: Clipboard,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Clipboard,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    creator:
      | ((
          parent: Clipboard,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>)
      | {
          fragment: string;
          resolve: (
            parent: Clipboard,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | Promise<User>;
        };

    content:
      | ((
          parent: Clipboard,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Clipboard,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    archived:
      | ((
          parent: Clipboard,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: Clipboard,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface BoardInput {
    title: string;
    isPublic: boolean;
  }
  export interface CardInput {
    title: string;
    content?: string | null;
    files?: Array<string | null> | null;
  }
  export interface ClipboardInput {
    content: string;
  }

  export interface ArgsMakeBoard {
    data: BoardInput;
  }

  export interface ArgsEditBoard {
    id: string;
    data: BoardInput;
  }

  export interface ArgsMakeCard {
    data?: CardInput | null;
    board?: string | null;
  }

  export interface ArgsEditCard {
    id: string;
    data?: CardInput | null;
  }

  export interface ArgsMakeClipboard {
    data?: ClipboardInput | null;
  }

  export interface ArgsDeleteClipboard {
    id: string;
  }

  export interface ArgsLogin {
    email: string;
    password: string;
  }

  export interface ArgsSignup {
    email: string;
    password: string;
  }

  export type MakeBoardResolver =
    | ((
        parent: undefined,
        args: ArgsMakeBoard,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Board | Promise<Board>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsMakeBoard,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Board | Promise<Board>;
      };

  export type EditBoardResolver =
    | ((
        parent: undefined,
        args: ArgsEditBoard,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Board | Promise<Board>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsEditBoard,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Board | Promise<Board>;
      };

  export type MakeCardResolver =
    | ((
        parent: undefined,
        args: ArgsMakeCard,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Card | Promise<Card>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsMakeCard,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Card | Promise<Card>;
      };

  export type EditCardResolver =
    | ((
        parent: undefined,
        args: ArgsEditCard,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Card | Promise<Card>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsEditCard,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Card | Promise<Card>;
      };

  export type MakeClipboardResolver =
    | ((
        parent: undefined,
        args: ArgsMakeClipboard,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Clipboard | Promise<Clipboard>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsMakeClipboard,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Clipboard | Promise<Clipboard>;
      };

  export type DeleteClipboardResolver =
    | ((
        parent: undefined,
        args: ArgsDeleteClipboard,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Clipboard | Promise<Clipboard>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsDeleteClipboard,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Clipboard | Promise<Clipboard>;
      };

  export type LoginResolver =
    | ((
        parent: undefined,
        args: ArgsLogin,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => AuthPayload | Promise<AuthPayload>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsLogin,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => AuthPayload | Promise<AuthPayload>;
      };

  export type SignupResolver =
    | ((
        parent: undefined,
        args: ArgsSignup,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => AuthPayload | Promise<AuthPayload>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsSignup,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => AuthPayload | Promise<AuthPayload>;
      };

  export interface Type {
    makeBoard:
      | ((
          parent: undefined,
          args: ArgsMakeBoard,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Board | Promise<Board>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsMakeBoard,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Board | Promise<Board>;
        };

    editBoard:
      | ((
          parent: undefined,
          args: ArgsEditBoard,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Board | Promise<Board>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsEditBoard,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Board | Promise<Board>;
        };

    makeCard:
      | ((
          parent: undefined,
          args: ArgsMakeCard,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Card | Promise<Card>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsMakeCard,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Card | Promise<Card>;
        };

    editCard:
      | ((
          parent: undefined,
          args: ArgsEditCard,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Card | Promise<Card>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsEditCard,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Card | Promise<Card>;
        };

    makeClipboard:
      | ((
          parent: undefined,
          args: ArgsMakeClipboard,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Clipboard | Promise<Clipboard>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsMakeClipboard,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Clipboard | Promise<Clipboard>;
        };

    deleteClipboard:
      | ((
          parent: undefined,
          args: ArgsDeleteClipboard,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Clipboard | Promise<Clipboard>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsDeleteClipboard,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Clipboard | Promise<Clipboard>;
        };

    login:
      | ((
          parent: undefined,
          args: ArgsLogin,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => AuthPayload | Promise<AuthPayload>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsLogin,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => AuthPayload | Promise<AuthPayload>;
        };

    signup:
      | ((
          parent: undefined,
          args: ArgsSignup,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => AuthPayload | Promise<AuthPayload>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsSignup,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => AuthPayload | Promise<AuthPayload>;
        };
  }
}

export namespace AuthPayloadResolvers {
  export const defaultResolvers = {
    token: (parent: AuthPayload) => parent.token
  };

  export type TokenResolver =
    | ((
        parent: AuthPayload,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: AuthPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type UserResolver =
    | ((
        parent: AuthPayload,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | Promise<User>)
    | {
        fragment: string;
        resolve: (
          parent: AuthPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>;
      };

  export interface Type {
    token:
      | ((
          parent: AuthPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: AuthPayload,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    user:
      | ((
          parent: AuthPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>)
      | {
          fragment: string;
          resolve: (
            parent: AuthPayload,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | Promise<User>;
        };
  }
}

export namespace SubscriptionResolvers {
  export const defaultResolvers = {};

  export type CardsResolver = {
    subscribe: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) =>
      | AsyncIterator<Array<CardSubscriptionPayload | null>>
      | Promise<AsyncIterator<Array<CardSubscriptionPayload | null>>>;
    resolve?: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) =>
      | Array<CardSubscriptionPayload | null>
      | Promise<Array<CardSubscriptionPayload | null>>;
  };

  export type ClipboardsResolver = {
    subscribe: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) =>
      | AsyncIterator<Array<Clipboard | null>>
      | Promise<AsyncIterator<Array<Clipboard | null>>>;
    resolve?: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Array<Clipboard | null> | Promise<Array<Clipboard | null>>;
  };

  export interface Type {
    cards: {
      subscribe: (
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) =>
        | AsyncIterator<Array<CardSubscriptionPayload | null>>
        | Promise<AsyncIterator<Array<CardSubscriptionPayload | null>>>;
      resolve?: (
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) =>
        | Array<CardSubscriptionPayload | null>
        | Promise<Array<CardSubscriptionPayload | null>>;
    };

    clipboards: {
      subscribe: (
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) =>
        | AsyncIterator<Array<Clipboard | null>>
        | Promise<AsyncIterator<Array<Clipboard | null>>>;
      resolve?: (
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Array<Clipboard | null> | Promise<Array<Clipboard | null>>;
    };
  }
}

export namespace CardSubscriptionPayloadResolvers {
  export const defaultResolvers = {
    mutation: (parent: CardSubscriptionPayload) => parent.mutation,
    node: (parent: CardSubscriptionPayload) =>
      parent.node === undefined ? null : parent.node,
    previousValues: (parent: CardSubscriptionPayload) =>
      parent.previousValues === undefined ? null : parent.previousValues
  };

  export type MutationResolver =
    | ((
        parent: CardSubscriptionPayload,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => MutationType | Promise<MutationType>)
    | {
        fragment: string;
        resolve: (
          parent: CardSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => MutationType | Promise<MutationType>;
      };

  export type NodeResolver =
    | ((
        parent: CardSubscriptionPayload,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Card | null | Promise<Card | null>)
    | {
        fragment: string;
        resolve: (
          parent: CardSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Card | null | Promise<Card | null>;
      };

  export type UpdatedFieldsResolver =
    | ((
        parent: CardSubscriptionPayload,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string[] | null | Promise<string[] | null>)
    | {
        fragment: string;
        resolve: (
          parent: CardSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string[] | null | Promise<string[] | null>;
      };

  export type PreviousValuesResolver =
    | ((
        parent: CardSubscriptionPayload,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => CardPreviousValues | null | Promise<CardPreviousValues | null>)
    | {
        fragment: string;
        resolve: (
          parent: CardSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => CardPreviousValues | null | Promise<CardPreviousValues | null>;
      };

  export interface Type {
    mutation:
      | ((
          parent: CardSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => MutationType | Promise<MutationType>)
      | {
          fragment: string;
          resolve: (
            parent: CardSubscriptionPayload,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => MutationType | Promise<MutationType>;
        };

    node:
      | ((
          parent: CardSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Card | null | Promise<Card | null>)
      | {
          fragment: string;
          resolve: (
            parent: CardSubscriptionPayload,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Card | null | Promise<Card | null>;
        };

    updatedFields:
      | ((
          parent: CardSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string[] | null | Promise<string[] | null>)
      | {
          fragment: string;
          resolve: (
            parent: CardSubscriptionPayload,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string[] | null | Promise<string[] | null>;
        };

    previousValues:
      | ((
          parent: CardSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => CardPreviousValues | null | Promise<CardPreviousValues | null>)
      | {
          fragment: string;
          resolve: (
            parent: CardSubscriptionPayload,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => CardPreviousValues | null | Promise<CardPreviousValues | null>;
        };
  }
}

export namespace CardPreviousValuesResolvers {
  export const defaultResolvers = {
    id: (parent: CardPreviousValues) => parent.id,
    title: (parent: CardPreviousValues) => parent.title,
    slug: (parent: CardPreviousValues) => parent.slug,
    content: (parent: CardPreviousValues) =>
      parent.content === undefined ? null : parent.content,
    public: (parent: CardPreviousValues) => parent.public,
    archived: (parent: CardPreviousValues) => parent.archived
  };

  export type IdResolver =
    | ((
        parent: CardPreviousValues,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: CardPreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type TitleResolver =
    | ((
        parent: CardPreviousValues,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: CardPreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type SlugResolver =
    | ((
        parent: CardPreviousValues,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: CardPreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type ContentResolver =
    | ((
        parent: CardPreviousValues,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: CardPreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type PublicResolver =
    | ((
        parent: CardPreviousValues,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: CardPreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type ArchivedResolver =
    | ((
        parent: CardPreviousValues,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: CardPreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export interface Type {
    id:
      | ((
          parent: CardPreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: CardPreviousValues,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    title:
      | ((
          parent: CardPreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: CardPreviousValues,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    slug:
      | ((
          parent: CardPreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: CardPreviousValues,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    content:
      | ((
          parent: CardPreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: CardPreviousValues,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    public:
      | ((
          parent: CardPreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: CardPreviousValues,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    archived:
      | ((
          parent: CardPreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: CardPreviousValues,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  Board: BoardResolvers.Type;
  User: UserResolvers.Type;
  Card: CardResolvers.Type;
  File: FileResolvers.Type;
  Clipboard: ClipboardResolvers.Type;
  Mutation: MutationResolvers.Type;
  AuthPayload: AuthPayloadResolvers.Type;
  Subscription: SubscriptionResolvers.Type;
  CardSubscriptionPayload: CardSubscriptionPayloadResolvers.Type;
  CardPreviousValues: CardPreviousValuesResolvers.Type;
}

// @ts-ignore
declare module "graphql-tools" {
  interface IResolvers extends Resolvers {}
}
